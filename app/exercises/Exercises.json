{
  "languages": [
    {
      "name": "HTML",
      "problems": [
        {
          "question": "Create a basic HTML page with a heading and a paragraph.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Basic HTML Page</title>\n</head>\n<body>\n<h1>Hello, World!</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>"
        },
        {
          "question": "Add an image to the HTML page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Image Example</title>\n</head>\n<body>\n<img src='image.jpg' alt='Example Image'>\n</body>\n</html>"
        },
        {
          "question": "Create a hyperlink to another page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Link Example</title>\n</head>\n<body>\n<a href='https://www.example.com'>Visit Example.com</a>\n</body>\n</html>"
        },
        {
          "question": "Create an ordered list with three items.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Ordered List</title>\n</head>\n<body>\n<ol>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item</li>\n</ol>\n</body>\n</html>"
        },
        {
          "question": "Create an unordered list with three items.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Unordered List</title>\n</head>\n<body>\n<ul>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item</li>\n</ul>\n</body>\n</html>"
        },
        {
          "question": "Add a table with three rows and three columns.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Table Example</title>\n</head>\n<body>\n<table border='1'>\n<tr>\n<th>Header 1</th>\n<th>Header 2</th>\n<th>Header 3</th>\n</tr>\n<tr>\n<td>Row 1, Cell 1</td>\n<td>Row 1, Cell 2</td>\n<td>Row 1, Cell 3</td>\n</tr>\n<tr>\n<td>Row 2, Cell 1</td>\n<td>Row 2, Cell 2</td>\n<td>Row 2, Cell 3</td>\n</tr>\n</table>\n</body>\n</html>"
        },
        {
          "question": "Create a form with an input field and a submit button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Form Example</title>\n</head>\n<body>\n<form>\n<label for='name'>Name:</label>\n<input type='text' id='name' name='name'>\n<input type='submit' value='Submit'>\n</form>\n</body>\n</html>"
        },
        {
          "question": "Add a video to the HTML page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Video Example</title>\n</head>\n<body>\n<video width='320' height='240' controls>\n<source src='movie.mp4' type='video/mp4'>\nYour browser does not support the video tag.\n</video>\n</body>\n</html>"
        },
        {
          "question": "Create a dropdown menu.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Dropdown Example</title>\n</head>\n<body>\n<label for='cars'>Choose a car:</label>\n<select id='cars' name='cars'>\n<option value='volvo'>Volvo</option>\n<option value='saab'>Saab</option>\n<option value='fiat'>Fiat</option>\n<option value='audi'>Audi</option>\n</select>\n</body>\n</html>"
        },
        {
          "question": "Create a checkbox.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Checkbox Example</title>\n</head>\n<body>\n<form>\n<input type='checkbox' id='vehicle1' name='vehicle1' value='Bike'>\n<label for='vehicle1'> I have a bike</label><br>\n<input type='checkbox' id='vehicle2' name='vehicle2' value='Car'>\n<label for='vehicle2'> I have a car</label><br>\n<input type='submit' value='Submit'>\n</form>\n</body>\n</html>"
        },
        {
          "question": "Create a radio button group.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Radio Button Example</title>\n</head>\n<body>\n<form>\n<input type='radio' id='male' name='gender' value='male'>\n<label for='male'>Male</label><br>\n<input type='radio' id='female' name='gender' value='female'>\n<label for='female'>Female</label><br>\n<input type='submit' value='Submit'>\n</form>\n</body>\n</html>"
        },
        {
          "question": "Add an audio file to the HTML page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Audio Example</title>\n</head>\n<body>\n<audio controls>\n<source src='audio.mp3' type='audio/mpeg'>\nYour browser does not support the audio element.\n</audio>\n</body>\n</html>"
        },
        {
          "question": "Embed a YouTube video in the HTML page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>YouTube Embed Example</title>\n</head>\n<body>\n<iframe width='560' height='315' src='https://www.youtube.com/embed/dQw4w9WgXcQ' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>\n</body>\n</html>"
        },
        {
          "question": "Create a navigation bar with links.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Navigation Bar</title>\n</head>\n<body>\n<nav>\n<a href='#home'>Home</a> |\n<a href='#news'>News</a> |\n<a href='#contact'>Contact</a> |\n<a href='#about'>About</a>\n</nav>\n</body>\n</html>"
        },
        {
          "question": "Create a div element with an ID and a class.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Div Element</title>\n</head>\n<body>\n<div id='myDiv' class='myClass'>This is a div element.</div>\n</body>\n</html>"
        },
        {
          "question": "Create a header element with a navigation bar.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Header Element</title>\n</head>\n<body>\n<header>\n<nav>\n<a href='#home'>Home</a> |\n<a href='#news'>News</a> |\n<a href='#contact'>Contact</a> |\n<a href='#about'>About</a>\n</nav>\n</header>\n</body>\n</html>"
        },
        {
          "question": "Create a footer element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Footer Element</title>\n</head>\n<body>\n<footer>\n<p>Footer content here.</p>\n</footer>\n</body>\n</html>"
        },
        {
          "question": "Create a section element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Section Element</title>\n</head>\n<body>\n<section>\n<h2>Section Title</h2>\n<p>Section content here.</p>\n</section>\n</body>\n</html>"
        },
        {
          "question": "Create an article element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Article Element</title>\n</head>\n<body>\n<article>\n<h2>Article Title</h2>\n<p>Article content here.</p>\n</article>\n</body>\n</html>"
        },
        {
          "question": "Create an aside element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Aside Element</title>\n</head>\n<body>\n<aside>\n<h2>Aside Title</h2>\n<p>Aside content here.</p>\n</aside>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "CSS",
      "problems": [
        {
          "question": "Center align text inside a div element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\ndiv {\n  text-align: center;\n}\n</style>\n</head>\n<body>\n<div>This text is centered.</div>\n</body>\n</html>"
        },
        {
          "question": "Add a border around an image.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\nimg {\n  border: 2px solid black;\n}\n</style>\n</head>\n<body>\n<img src='image.jpg' alt='Example Image'>\n</body>\n</html>"
        },
        {
          "question": "Create a three-column layout using CSS.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.column {\n  float: left;\n  width: 33.33%;\n}\n.clearfix::after {\n  content: \"\";\n  clear: both;\n  display: table;\n}\n</style>\n</head>\n<body>\n<div class='clearfix'>\n  <div class='column'>Column 1</div>\n  <div class='column'>Column 2</div>\n  <div class='column'>Column 3</div>\n</div>\n</body>\n</html>"
        },
        {
          "question": "Create a hover effect on a button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.button {\n  background-color: blue;\n  color: white;\n  padding: 10px;\n  transition: background-color 0.3s ease;\n}\n.button:hover {\n  background-color: darkblue;\n}\n</style>\n</head>\n<body>\n<button class='button'>Hover Me!</button>\n</body>\n</html>"
        },
        {
          "question": "Style a list to have no bullets and each item in a new line.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: block;\n  margin-bottom: 10px;\n}\n</style>\n</head>\n<body>\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n</body>\n</html>"
        },
        {
          "question": "Create a fixed navigation bar that sticks to the top of the page.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.navbar {\n  overflow: hidden;\n  background-color: #333;\n  position: fixed;\n  top: 0;\n  width: 100%;\n}\n.navbar a {\n  float: left;\n  display: block;\n  color: #f2f2f2;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n</style>\n</head>\n<body>\n<div class='navbar'>\n  <a href='#home'>Home</a>\n  <a href='#about'>About</a>\n  <a href='#contact'>Contact</a>\n</div>\n<div style='padding: 20px; margin-top: 50px;'>\n  <p>Scroll to see the sticky effect.</p>\n  <p>Some text to represent the content..</p>\n</div>\n</body>\n</html>"
        },
        {
          "question": "Create a CSS animation that makes an element bounce.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-30px);\n  }\n  60% {\n    transform: translateY(-15px);\n  }\n}\ndiv {\n  animation: bounce 2s infinite;\n}\n</style>\n</head>\n<body>\n<div style='width: 100px; height: 100px; background-color: red;'></div>\n</body>\n</html>"
        },
        {
          "question": "Style a form with input fields and a submit button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\nform {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n}\ninput[type='text'], input[type='password'] {\n  margin-bottom: 10px;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\nbutton[type='submit'] {\n  background-color: blue;\n  color: white;\n  padding: 10px;\n  border: none;\n  cursor: pointer;\n}\nbutton[type='submit']:hover {\n  background-color: darkblue;\n}\n</style>\n</head>\n<body>\n<form>\n  <input type='text' placeholder='Username' />\n  <input type='password' placeholder='Password' />\n  <button type='submit'>Submit</button>\n</form>\n</body>\n</html>"
        },
        {
          "question": "Create a CSS grid layout with 3 columns and 2 rows.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.grid-container {\n  display: grid;\n  grid-template-columns: auto auto auto;\n  grid-template-rows: auto auto;\n  gap: 10px;\n  padding: 10px;\n}\n.grid-item {\n  background-color: lightblue;\n  padding: 20px;\n  font-size: 30px;\n  text-align: center;\n}\n</style>\n</head>\n<body>\n<div class='grid-container'>\n  <div class='grid-item'>Item 1</div>\n  <div class='grid-item'>Item 2</div>\n  <div class='grid-item'>Item 3</div>\n  <div class='grid-item'>Item 4</div>\n  <div class='grid-item'>Item 5</div>\n  <div class='grid-item'>Item 6</div>\n</div>\n</body>\n</html>"
        },
        {
          "question": "Style a table with alternate row colors.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\ntr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n</style>\n</head>\n<body>\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Jane</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Jim</td>\n    <td>35</td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "question": "Create a CSS transition on hover.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n<style>\ndiv {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  transition: width 0.5s, height 0.5s, transform 0.5s;\n}\ndiv:hover {\n  width: 150px;\n  height: 150px;\n  transform: rotate(180deg);\n}\n</style>\n</head>\n<body>\n<div></div>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JavaScript",
      "problems": [
        {
          "question": "Create a function that adds two numbers and returns the result.",
          "solution": "// Function definition\nfunction addNumbers(a, b) {\n  return a + b;\n}\n\n// Example usage\nconsole.log(addNumbers(5, 3)); // Output: 8"
        },
        {
          "question": "Write a function that checks if a number is even or odd.",
          "solution": "// Function definition\nfunction checkEvenOrOdd(num) {\n  if (num % 2 === 0) {\n    return 'Even';\n  } else {\n    return 'Odd';\n  }\n}\n\n// Example usage\nconsole.log(checkEvenOrOdd(7)); // Output: Odd"
        },
        {
          "question": "Create a function that returns the factorial of a number.",
          "solution": "// Function definition\nfunction factorial(num) {\n  if (num === 0 || num === 1)\n    return 1;\n  for (var i = num - 1; i >= 1; i--) {\n    num *= i;\n  }\n  return num;\n}\n\n// Example usage\nconsole.log(factorial(5)); // Output: 120"
        },
        {
          "question": "Write a program to reverse a string.",
          "solution": "// Function definition\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\n// Example usage\nconsole.log(reverseString('hello')); // Output: 'olleh'"
        },
        {
          "question": "Create an array of numbers and sort it in descending order.",
          "solution": "// Array definition\nlet numbers = [5, 2, 8, 1, 4];\n\n// Sorting in descending order\nnumbers.sort(function(a, b) {\n  return b - a;\n});\n\n// Example usage\nconsole.log(numbers); // Output: [8, 5, 4, 2, 1]"
        },
        {
          "question": "Write a function that checks if a string is a palindrome.",
          "solution": "// Function definition\nfunction isPalindrome(str) {\n  const reversed = str.split('').reverse().join('');\n  return str === reversed;\n}\n\n// Example usage\nconsole.log(isPalindrome('madam')); // Output: true"
        },
        {
          "question": "Create a program that prints the Fibonacci sequence up to a certain number of terms.",
          "solution": "// Function definition\nfunction fibonacci(num) {\n  let a = 0, b = 1, temp;\n  for (let i = 0; i < num; i++) {\n    console.log(a);\n    temp = a;\n    a = b;\n    b = temp + b;\n  }\n}\n\n// Example usage\nfibonacci(10); // Output: Prints Fibonacci sequence up to 10 terms"
        },
        {
          "question": "Write a function that finds the largest element in an array.",
          "solution": "// Function definition\nfunction findLargest(arr) {\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n}\n\n// Example usage\nconsole.log(findLargest([3, 7, 2, 9, 1])); // Output: 9"
        },
        {
          "question": "Create a program that counts the number of vowels in a string.",
          "solution": "// Function definition\nfunction countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  let count = 0;\n  for (let char of str) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Example usage\nconsole.log(countVowels('Hello World')); // Output: 3"
        },
        {
          "question": "Write a function to calculate the power of a number.",
          "solution": "// Function definition\nfunction power(base, exponent) {\n  return Math.pow(base, exponent);\n}\n\n// Example usage\nconsole.log(power(2, 3)); // Output: 8"
        },
        {
          "question": "Create a function that removes duplicates from an array.",
          "solution": "// Function definition\nfunction removeDuplicates(arr) {\n  return Array.from(new Set(arr));\n}\n\n// Example usage\nconsole.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // Output: [1, 2, 3, 4, 5]"
        }
      ]
    },
    {
      "name": "Python",
      "problems": [
        {
          "question": "Create a function that adds two numbers and returns the result.",
          "solution": "# Function definition\n\ndef add_numbers(a, b):\n    return a + b\n\n# Example usage\nprint(add_numbers(5, 3))  # Output: 8"
        },
        {
          "question": "Write a program to check if a number is prime or not.",
          "solution": "# Function definition\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Example usage\nprint(is_prime(17))  # Output: True"
        },
        {
          "question": "Create a function that reverses a string.",
          "solution": "# Function definition\n\ndef reverse_string(s):\n    return s[::-1]\n\n# Example usage\nprint(reverse_string('hello'))  # Output: 'olleh'"
        },
        {
          "question": "Write a program to find the factorial of a number.",
          "solution": "# Function definition\n\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\n# Example usage\nprint(factorial(5))  # Output: 120"
        },
        {
          "question": "Create a program to calculate the Fibonacci sequence up to a certain number of terms.",
          "solution": "# Function definition\n\ndef fibonacci(num):\n    a, b = 0, 1\n    for _ in range(num):\n        print(a)\n        a, b = b, a + b\n\n# Example usage\nfibonacci(10)  # Output: Prints Fibonacci sequence up to 10 terms"
        },
        {
          "question": "Write a function to find the largest element in an array.",
          "solution": "# Function definition\n\ndef find_largest(arr):\n    if not arr:\n        return None\n    largest = arr[0]\n    for num in arr:\n        if num > largest:\n            largest = num\n    return largest\n\n# Example usage\nprint(find_largest([3, 7, 2, 9, 1]))  # Output: 9"
        },
        {
          "question": "Create a program to count the number of vowels in a string.",
          "solution": "# Function definition\n\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Example usage\nprint(count_vowels('Hello World'))  # Output: 3"
        },
        {
          "question": "Write a function that checks if a string is a palindrome.",
          "solution": "# Function definition\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Example usage\nprint(is_palindrome('madam'))  # Output: True"
        },
        {
          "question": "Create a program to find the sum of all elements in an array.",
          "solution": "# Function definition\n\ndef sum_array(arr):\n    return sum(arr)\n\n# Example usage\nprint(sum_array([1, 2, 3, 4, 5]))  # Output: 15"
        },
        {
          "question": "Write a function to check if a number is a perfect square.",
          "solution": "# Function definition\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n\n# Example usage\nprint(is_perfect_square(16))  # Output: True"
        }
      ]
    },
    {
      "name": "PHP",
      "problems": [
        {
          "question": "Create a PHP script that prints 'Hello, World!'",
          "solution": "<?php\n  echo 'Hello, World!';\n?>"
        },
        {
          "question": "Write a PHP script to add two numbers.",
          "solution": "<?php\n  $num1 = 10;\n  $num2 = 5;\n  $sum = $num1 + $num2;\n  echo 'Sum: ' . $sum;\n?>"
        },
        {
          "question": "Create a PHP function that calculates the factorial of a number.",
          "solution": "<?php\n  function factorial($n) {\n    if ($n <= 1) {\n      return 1;\n    }\n    return $n * factorial($n - 1);\n  }\n\n  $number = 5;\n  echo 'Factorial of ' . $number . ' is ' . factorial($number);\n?>"
        },
        {
          "question": "Write a PHP script to sort an array of numbers in ascending order.",
          "solution": "<?php\n  $numbers = [5, 2, 8, 1, 9];\n  sort($numbers);\n  foreach ($numbers as $num) {\n    echo $num . ' ';\n  }\n?>"
        },
        {
          "question": "Create a PHP script that reads a file and displays its content.",
          "solution": "<?php\n  $filename = 'example.txt';\n  $content = file_get_contents($filename);\n  echo $content;\n?>"
        },
        {
          "question": "Write a PHP script to handle form submission and validate user input.",
          "solution": "<?php\n  $name = $_POST['name'];\n  $email = $_POST['email'];\n\n  if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (empty($name) || empty($email)) {\n      echo 'Please fill all fields.';\n    } else {\n      echo 'Hello ' . $name . '! Your email is ' . $email;\n    }\n  }\n?>\n\n<form method='post' action='<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>'>\n  Name: <input type='text' name='name'><br>\n  Email: <input type='text' name='email'><br>\n  <input type='submit' value='Submit'>\n</form>"
        },
        {
          "question": "Create a PHP script to connect to a MySQL database and fetch data.",
          "solution": "<?php\n  $servername = 'localhost';\n  $username = 'username';\n  $password = 'password';\n  $dbname = 'myDB';\n\n  // Create connection\n  $conn = new mysqli($servername, $username, $password, $dbname);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);\n  }\n\n  $sql = 'SELECT id, firstname, lastname FROM MyGuests';\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n      echo 'id: ' . $row['id'] . ' - Name: ' . $row['firstname'] . ' ' . $row['lastname'] . '<br>';\n    }\n  } else {\n    echo '0 results';\n  }\n\n  $conn->close();\n?>"
        }
      ]
    },
    {
      "name": "jQuery",
      "problems": [
        {
          "question": "Create a jQuery script that changes the text of a paragraph to 'Hello, jQuery!' when a button is clicked.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#changeText').click(function() {\n        $('p').text('Hello, jQuery!');\n      });\n    });\n  </script>\n</head>\n<body>\n  <p>This is a paragraph.</p>\n  <button id='changeText'>Change Text</button>\n</body>\n</html>"
        },
        {
          "question": "Write a jQuery script to show and hide a div element when clicking a button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#toggleDiv').click(function() {\n        $('#myDiv').toggle();\n      });\n    });\n  </script>\n</head>\n<body>\n  <div id='myDiv' style='display: none;'>This is a div element.</div>\n  <button id='toggleDiv'>Toggle Div</button>\n</body>\n</html>"
        },
        {
          "question": "Create a jQuery script to change the background color of a paragraph when hovering over it.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('p').hover(function() {\n        $(this).css('background-color', 'lightblue');\n      }, function() {\n        $(this).css('background-color', 'white');\n      });\n    });\n  </script>\n</head>\n<body>\n  <p>This is a paragraph.</p>\n</body>\n</html>"
        },
        {
          "question": "Write a jQuery script to append a new list item to an unordered list when a button is clicked.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#addItem').click(function() {\n        $('ul').append('<li>New Item</li>');\n      });\n    });\n  </script>\n</head>\n<body>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <button id='addItem'>Add Item</button>\n</body>\n</html>"
        },
        {
          "question": "Create a jQuery script to fade in and fade out a paragraph when clicking a button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#fadeButton').click(function() {\n        $('p').fadeToggle();\n      });\n    });\n  </script>\n</head>\n<body>\n  <p>This is a paragraph.</p>\n  <button id='fadeButton'>Fade Toggle</button>\n</body>\n</html>"
        },
        {
          "question": "Write a jQuery script to get the value of an input field when a form is submitted.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#myForm').submit(function(event) {\n        event.preventDefault();\n        var inputValue = $('#myInput').val();\n        alert('Input Value: ' + inputValue);\n      });\n    });\n  </script>\n</head>\n<body>\n  <form id='myForm'>\n    <input type='text' id='myInput'>\n    <input type='submit' value='Submit'>\n  </form>\n</body>\n</html>"
        },
        {
          "question": "Create a jQuery script to slide up and slide down a div element when clicking a button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#toggleSlide').click(function() {\n        $('#myDiv').slideToggle();\n      });\n    });\n  </script>\n</head>\n<body>\n  <div id='myDiv' style='height: 100px; background-color: lightblue;'>This is a div element.</div>\n  <button id='toggleSlide'>Toggle Slide</button>\n</body>\n</html>"
        },
        {
          "question": "Write a jQuery script to add a CSS class to an element when clicking a button.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#addClass').click(function() {\n        $('p').addClass('myClass');\n      });\n    });\n  </script>\n  <style>\n    .myClass {\n      font-weight: bold;\n      color: blue;\n    }\n  </style>\n</head>\n<body>\n  <p>This is a paragraph.</p>\n  <button id='addClass'>Add Class</button>\n</body>\n</html>"
        },
        {
          "question": "Create a jQuery script to validate an email input field when a form is submitted.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#myForm').submit(function(event) {\n        event.preventDefault();\n        var email = $('#email').val();\n        var emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        if (emailPattern.test(email)) {\n          alert('Valid Email: ' + email);\n        } else {\n          alert('Invalid Email');\n        }\n      });\n    });\n  </script>\n</head>\n<body>\n  <form id='myForm'>\n    Email: <input type='text' id='email'>\n    <input type='submit' value='Submit'>\n  </form>\n</body>\n</html>"
        },
        {
          "question": "Write a jQuery script to perform an AJAX GET request and display the response data.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('#getData').click(function() {\n        $.get('https://jsonplaceholder.typicode.com/posts/1', function(data) {\n          $('#result').html('<p>Title: ' + data.title + '</p><p>Body: ' + data.body + '</p>');\n        });\n      });\n    });\n  </script>\n</head>\n<body>\n  <button id='getData'>Get Data</button>\n  <div id='result'></div>\n</body>\n</html>"
        },
        {
          "question": "Create a jQuery script to iterate over a list and change each list item's text color.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script>\n    $(document).ready(function() {\n      $('li').each(function() {\n        $(this).css('color', 'blue');\n      });\n    });\n  </script>\n</head>\n<body>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java",
      "problems": [
        {
          "question": "Write a Java program to print 'Hello, World!'",
          "solution": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
        },
        {
          "question": "Create a Java program to calculate the sum of two integers.",
          "solution": "public class SumCalculator {\n    public static void main(String[] args) {\n        int num1 = 5, num2 = 10, sum;\n        sum = num1 + num2;\n        System.out.println(\"Sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n    }\n}"
        },
        {
          "question": "Write a Java program to find the factorial of a number.",
          "solution": "public class FactorialCalculator {\n    public static void main(String[] args) {\n        int num = 5;\n        long factorial = 1;\n        for(int i = 1; i <= num; ++i) {\n            factorial *= i;\n        }\n        System.out.println(\"Factorial of \" + num + \" = \" + factorial);\n    }\n}"
        },
        {
          "question": "Create a Java program to check if a number is prime.",
          "solution": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int num = 29;\n        boolean isPrime = true;\n        for(int i = 2; i <= num/2; ++i) {\n            if(num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime)\n            System.out.println(num + \" is a prime number.\");\n        else\n            System.out.println(num + \" is not a prime number.\");\n    }\n}"
        },
        {
          "question": "Write a Java program to reverse a string.",
          "solution": "public class StringReversal {\n    public static void main(String[] args) {\n        String original = \"hello world\";\n        String reversed = \"\";\n        for(int i = original.length() - 1; i >= 0; i--) {\n            reversed += original.charAt(i);\n        }\n        System.out.println(\"Reversed string: \" + reversed);\n    }\n}"
        },
        {
          "question": "Create a Java program to calculate the Fibonacci series.",
          "solution": "public class FibonacciSeries {\n    public static void main(String[] args) {\n        int n = 10, t1 = 0, t2 = 1;\n        System.out.print(\"Fibonacci Series: \");\n        for (int i = 1; i <= n; ++i) {\n            System.out.print(t1 + \" + \");\n            int sum = t1 + t2;\n            t1 = t2;\n            t2 = sum;\n        }\n    }\n}"
        },
        {
          "question": "Write a Java program to find the largest and smallest elements in an array.",
          "solution": "public class ArrayMinMax {\n    public static void main(String[] args) {\n        int[] numbers = {5, 12, 3, 89, 23};\n        int min = numbers[0];\n        int max = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] < min) {\n                min = numbers[i];\n            }\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n        }\n        System.out.println(\"Minimum: \" + min);\n        System.out.println(\"Maximum: \" + max);\n    }\n}"
        },
        {
          "question": "Create a Java program to count the number of vowels and consonants in a string.",
          "solution": "public class VowelConsonantCounter {\n    public static void main(String[] args) {\n        String str = \"hello world\";\n        int vowels = 0, consonants = 0;\n        str = str.toLowerCase();\n        for(int i = 0; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                ++vowels;\n            }\n            else if((ch >= 'a' && ch <= 'z')) {\n                ++consonants;\n            }\n        }\n        System.out.println(\"Vowels: \" + vowels);\n        System.out.println(\"Consonants: \" + consonants);\n    }\n}"
        },
        {
          "question": "Write a Java program to sort an array of integers in ascending order.",
          "solution": "public class ArraySorting {\n    public static void main(String[] args) {\n        int[] numbers = {5, 12, 3, 89, 23};\n        for (int i = 0; i < numbers.length-1; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] > numbers[j]) {\n                    int temp = numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = temp;\n                }\n            }\n        }\n        System.out.print(\"Sorted Array: \");\n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n    }\n}"
        },
        {
          "question": "Create a Java program to find the GCD (Greatest Common Divisor) of two numbers.",
          "solution": "public class GCD {\n    public static void main(String[] args) {\n        int num1 = 12, num2 = 30, gcd = 1;\n        for(int i = 1; i <= num1 && i <= num2; ++i) {\n            if(num1 % i == 0 && num2 % i == 0) {\n                gcd = i;\n            }\n        }\n        System.out.println(\"GCD of \" + num1 + \" and \" + num2 + \" is: \" + gcd);\n    }\n}"
        },
        {
          "question": "Write a Java program to check if a string is a palindrome.",
          "solution": "public class PalindromeChecker {\n    public static void main(String[] args) {\n        String str = \"madam\";\n        boolean isPalindrome = true;\n        int length = str.length();\n        for(int i = 0; i < length / 2; i++) {\n            if(str.charAt(i) != str.charAt(length - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        if(isPalindrome)\n            System.out.println(str + \" is a palindrome.\");\n        else\n            System.out.println(str + \" is not a palindrome.\");\n    }\n}"
        },
        {
          "question": "Create a Java program to find the factorial of a number using recursion.",
          "solution": "public class Factorial {\n    public static void main(String[] args) {\n        int num = 5;\n        long factorial = multiplyNumbers(num);\n        System.out.println(\"Factorial of \" + num + \" = \" + factorial);\n    }\n\n    public static long multiplyNumbers(int num) {\n        if (num >= 1)\n            return num * multiplyNumbers(num - 1);\n        else\n            return 1;\n    }\n}"
        },
        {
          "question": "Write a Java program to check if a number is an Armstrong number or not.",
          "solution": "public class ArmstrongNumber {\n    public static void main(String[] args) {\n        int num = 153, originalNumber, remainder, result = 0;\n        originalNumber = num;\n        while (originalNumber != 0) {\n            remainder = originalNumber % 10;\n            result += Math.pow(remainder, 3);\n            originalNumber /= 10;\n        }\n        if (result == num)\n            System.out.println(num + \" is an Armstrong number.\");\n        else\n            System.out.println(num + \" is not an Armstrong number.\");\n    }\n}"
        }
      ]
    },
    {
      "name": "C++",
      "problems": [
        {
          "question": "Write a C++ program to display 'Hello, World!'",
          "solution": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}"
        },
        {
          "question": "Create a program to calculate the factorial of a number.",
          "solution": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num);\n    return 0;\n}"
        },
        {
          "question": "Write a program to find the sum of elements in an array.",
          "solution": "#include <iostream>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); ++i) {\n        sum += arr[i];\n    }\n    std::cout << \"Sum of array elements: \" << sum;\n    return 0;\n}"
        },
        {
          "question": "Create a program to check if a number is prime or not.",
          "solution": "#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    if (isPrime(num))\n        std::cout << num << \" is a prime number.\";\n    else\n        std::cout << num << \" is not a prime number.\";\n    return 0;\n}"
        },
        {
          "question": "Write a program to reverse a string.",
          "solution": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string str;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, str);\n    std::string reversed = \"\";\n    for (int i = str.length() - 1; i >= 0; --i) {\n        reversed += str[i];\n    }\n    std::cout << \"Reversed string: \" << reversed;\n    return 0;\n}"
        },
        {
          "question": "Create a program to find the Fibonacci series up to n terms.",
          "solution": "#include <iostream>\n\nvoid fibonacci(int n) {\n    int first = 0, second = 1, next;\n    std::cout << \"Fibonacci Series up to \" << n << \" terms: \";\n    for (int i = 1; i <= n; ++i) {\n        std::cout << first << \" \";\n        next = first + second;\n        first = second;\n        second = next;\n    }\n}\n\nint main() {\n    int n;\n    std::cout << \"Enter the number of terms: \";\n    std::cin >> n;\n    fibonacci(n);\n    return 0;\n}"
        },
        {
          "question": "Write a program to find the GCD (Greatest Common Divisor) of two numbers.",
          "solution": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << gcd(num1, num2);\n    return 0;\n}"
        },
        {
          "question": "Create a program to check if a string is a palindrome.",
          "solution": "#include <iostream>\n#include <string>\n\nbool isPalindrome(std::string str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str[left] != str[right])\n            return false;\n        ++left;\n        --right;\n    }\n    return true;\n}\n\nint main() {\n    std::string str;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, str);\n    if (isPalindrome(str))\n        std::cout << str << \" is a palindrome.\";\n    else\n        std::cout << str << \" is not a palindrome.\";\n    return 0;\n}"
        },
        {
          "question": "Write a program to find the factorial of a number using recursion.",
          "solution": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num);\n    return 0;\n}"
        },
        {
          "question": "Create a program to find the sum of first n natural numbers.",
          "solution": "#include <iostream>\n\nint sumOfNaturalNumbers(int n) {\n    return n * (n + 1) / 2;\n}\n\nint main() {\n    int n;\n    std::cout << \"Enter a number: \";\n    std::cin >> n;\n    std::cout << \"Sum of first \" << n << \" natural numbers is \" << sumOfNaturalNumbers(n);\n    return 0;\n}"
        },
        {
          "question": "Write a program to check if a number is Armstrong number or not.",
          "solution": "#include <iostream>\n#include <cmath>\n\nbool isArmstrong(int num) {\n    int sum = 0;\n    int temp = num;\n    int digits = (int) log10(num) + 1;\n    while (temp != 0) {\n        int remainder = temp % 10;\n        sum += pow(remainder, digits);\n        temp /= 10;\n    }\n    return sum == num;\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    if (isArmstrong(num))\n        std::cout << num << \" is an Armstrong number.\";\n    else\n        std::cout << num << \" is not an Armstrong number.\";\n    return 0;\n}"
        },
        {
          "question": "Create a program to print all prime numbers between two given numbers.",
          "solution": "#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    int start, end;\n    std::cout << \"Enter two numbers (start and end): \";\n    std::cin >> start >> end;\n    std::cout << \"Prime numbers between \" << start << \" and \" << end << \" are: \";\n    for (int i = start; i <= end; ++i) {\n        if (isPrime(i))\n            std::cout << i << \" \";\n    }\n    return 0;\n}"
        }
      ]
    },
    {
      "name": "TailwindCSS",
      "problems": [
        {
          "question": "Create a button using TailwindCSS with a primary color background.",
          "solution": "<button class='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'>Button</button>"
        },
        {
          "question": "Design a card component with an image, title, and description using TailwindCSS.",
          "solution": "<div class='max-w-sm rounded overflow-hidden shadow-lg'>\n  <img class='w-full' src='image.jpg' alt='Image'>\n  <div class='px-6 py-4'>\n    <div class='font-bold text-xl mb-2'>Card Title</div>\n    <p class='text-gray-700 text-base'>Card description goes here.</p>\n  </div>\n</div>"
        },
        {
          "question": "Create a responsive navbar using TailwindCSS with at least three menu items.",
          "solution": "<nav class='flex items-center justify-between flex-wrap bg-teal-500 p-6'>\n  <div class='flex items-center flex-shrink-0 text-white mr-6'>\n    <span class='font-semibold text-xl tracking-tight'>Navbar</span>\n  </div>\n  <div class='block lg:hidden'>\n    <button class='flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white'>\n      <svg class='fill-current h-3 w-3' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><title>Menu</title><path d='M0 0h20v2H0V0zm0 6h20v2H0V6zm0 6h20v2H0v-2z'/></svg>\n    </button>\n  </div>\n  <div class='w-full block flex-grow lg:flex lg:items-center lg:w-auto'>\n    <div class='text-sm lg:flex-grow'>\n      <a href='#' class='block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4'>Menu Item 1</a>\n      <a href='#' class='block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4'>Menu Item 2</a>\n      <a href='#' class='block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white'>Menu Item 3</a>\n    </div>\n  </div>\n</nav>"
        },
        {
          "question": "Design a form layout with input fields and a submit button using TailwindCSS.",
          "solution": "<form class='w-full max-w-sm'>\n  <div class='md:flex md:items-center mb-6'>\n    <div class='md:w-1/3'>\n      <label class='block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4' for='inline-full-name'>Full Name</label>\n    </div>\n    <div class='md:w-2/3'>\n      <input class='bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500' id='inline-full-name' type='text' placeholder='Jane Doe'>\n    </div>\n  </div>\n  <div class='md:flex md:items-center mb-6'>\n    <div class='md:w-1/3'>\n      <label class='block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4' for='inline-email'>Email</label>\n    </div>\n    <div class='md:w-2/3'>\n      <input class='bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500' id='inline-email' type='email' placeholder='jane.doe@example.com'>\n    </div>\n  </div>\n  <div class='md:flex md:items-center'>\n    <div class='md:w-1/3'></div>\n    <div class='md:w-2/3'>\n      <button class='shadow bg-purple-500 hover:bg-purple-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded' type='button'>\n        Submit\n      </button>\n    </div>\n  </div>\n</form>"
        },
        {
          "question": "Create a grid layout with multiple cards using TailwindCSS.",
          "solution": "<div class='grid grid-cols-3 gap-4'>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 1</div>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 2</div>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 3</div>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 4</div>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 5</div>\n  <div class='bg-gray-200 p-4 rounded shadow'>Card 6</div>\n</div>"
        },
        {
          "question": "Design a responsive sidebar menu using TailwindCSS.",
          "solution": "<div class='flex h-screen bg-gray-200'>\n  <div class='bg-gray-800 text-gray-100 w-64 flex flex-col'>\n    <div class='flex items-center justify-center h-16 border-b border-gray-700'>\n      Logo\n    </div>\n    <div class='overflow-y-auto flex-1'>\n      <a href='#' class='py-2 px-4 block hover:bg-gray-700'>Dashboard</a>\n      <a href='#' class='py-2 px-4 block hover:bg-gray-700'>Projects</a>\n      <a href='#' class='py-2 px-4 block hover:bg-gray-700'>Orders</a>\n      <a href='#' class='py-2 px-4 block hover:bg-gray-700'>Settings</a>\n    </div>\n    <div class='p-4 border-t border-gray-700'>\n      <a href='#' class='py-2 px-4 block hover:bg-gray-700'>Logout</a>\n    </div>\n  </div>\n  <div class='flex-1 p-10'>\n    <!-- Main Content Here -->\n  </div>\n</div>"
        },
        {
          "question": "Create a responsive grid layout with different column spans using TailwindCSS.",
          "solution": "<div class='grid grid-cols-3 gap-4'>\n  <div class='col-span-3 bg-gray-200 p-4 rounded shadow'>Full Width</div>\n  <div class='col-span-2 bg-gray-200 p-4 rounded shadow'>Two Thirds Width</div>\n  <div class='col-span-1 bg-gray-200 p-4 rounded shadow'>One Third Width</div>\n  <div class='col-span-1 bg-gray-200 p-4 rounded shadow'>One Third Width</div>\n  <div class='col-span-2 bg-gray-200 p-4 rounded shadow'>Two Thirds Width</div>\n  <div class='col-span-3 bg-gray-200 p-4 rounded shadow'>Full Width</div>\n</div>"
        },
        {
          "question": "Design a tooltip component using TailwindCSS.",
          "solution": "<span class='relative inline-block'>\n  <button class='bg-gray-200 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded'>Hover Me</button>\n  <span class='tooltip bg-gray-200 text-gray-800 opacity-0 absolute text-xs mt-2 p-2 rounded'>Tooltip Text</span>\n</span>\n\n<script>\nconst button = document.querySelector('button');\nconst tooltip = document.querySelector('.tooltip');\nbutton.addEventListener('mouseenter', () => tooltip.classList.remove('opacity-0'));\nbutton.addEventListener('mouseleave', () => tooltip.classList.add('opacity-0'));\n</script>"
        },
        {
          "question": "Design a responsive carousel/slider using TailwindCSS.",
          "solution": "<div class='carousel relative shadow-2xl bg-white'>\n  <div class='carousel-inner relative overflow-hidden w-full'>\n    <input class='carousel-open' type='radio' id='carousel-1' name='carousel' aria-hidden='true' hidden='' checked='checked'>\n    <div class='carousel-item absolute opacity-0' style='height:50vh;'>\n      <div class='block h-full w-full text-white text-5xl text-center'>Slide 1</div>\n    </div>\n    <input class='carousel-open' type='radio' id='carousel-2' name='carousel' aria-hidden='true' hidden=''>\n    <div class='carousel-item absolute opacity-0' style='height:50vh;'>\n      <div class='block h-full w-full text-white text-5xl text-center'>Slide 2</div>\n    </div>\n    <input class='carousel-open' type='radio' id='carousel-3' name='carousel' aria-hidden='true' hidden=''>\n    <div class='carousel-item absolute opacity-0' style='height:50vh;'>\n      <div class='block h-full w-full text-white text-5xl text-center'>Slide 3</div>\n    </div>\n    <label for='carousel-3' class='prev control-1 w-10 h-10 ml-2 md:ml-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>‹</label>\n    <label for='carousel-2' class='next control-1 w-10 h-10 mr-2 md:mr-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>›</label>\n    <label for='carousel-2' class='prev control-2 w-10 h-10 ml-2 md:ml-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>‹</label>\n    <label for='carousel-1' class='next control-2 w-10 h-10 mr-2 md:mr-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>›</label>\n    <label for='carousel-1' class='prev control-3 w-10 h-10 ml-2 md:ml-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>‹</label>\n    <label for='carousel-3' class='next control-3 w-10 h-10 mr-2 md:mr-0 absolute cursor-pointer hidden text-3xl font-bold text-white hover:text-gray-300'>›</label>\n    <ol class='carousel-indicators'>\n      <li class='inline-block mr-3'>\n        <label for='carousel-1' class='carousel-bullet cursor-pointer block text-4xl text-white hover:text-gray-300'>•</label>\n      </li>\n      <li class='inline-block mr-3'>\n        <label for='carousel-2' class='carousel-bullet cursor-pointer block text-4xl text-white hover:text-gray-300'>•</label>\n      </li>\n      <li class='inline-block mr-3'>\n        <label for='carousel-3' class='carousel-bullet cursor-pointer block text-4xl text-white hover:text-gray-300'>•</label>\n      </li>\n    </ol>\n  </div>\n</div>"
        },
        {
          "question": "Implement a responsive timeline using TailwindCSS to display events.",
          "solution": "<div class='flex flex-col md:flex-row w-full mx-auto md:space-x-4'>\n  <div class='flex flex-col w-full md:w-1/2 bg-white shadow-md rounded-lg p-8'>\n    <div class='flex items-center mb-4'>\n      <div class='bg-gray-800 rounded-full h-8 w-8'></div>\n      <div class='ml-4 font-bold'>Event Title 1</div>\n    </div>\n    <div class='text-gray-700 mb-4'>Event description goes here. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div>\n    <div class='flex items-center mb-4'>\n      <div class='bg-gray-800 rounded-full h-8 w-8'></div>\n      <div class='ml-4 font-bold'>Event Title 2</div>\n    </div>\n    <div class='text-gray-700'>Event description goes here. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div>\n  </div>\n  <div class='hidden md:block md:w-1/2 bg-gray-300 shadow-md rounded-lg p-8'>\n    <div class='flex items-center mb-4'>\n      <div class='bg-gray-800 rounded-full h-8 w-8'></div>\n      <div class='ml-4 font-bold'>Event Title 3</div>\n    </div>\n    <div class='text-gray-700'>Event description goes here. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div>\n  </div>\n</div>"
        }
      ]
    },
    {
      "name": "Bootstrap",
      "problems": [
        {
          "question": "Create a basic Bootstrap grid layout with two columns.",
          "solution": "<div class='container'>\n  <div class='row'>\n    <div class='col'>Column 1</div>\n    <div class='col'>Column 2</div>\n  </div>\n</div>"
        },
        {
          "question": "Design a responsive navbar using Bootstrap.",
          "solution": "<nav class='navbar navbar-expand-lg navbar-light bg-light'>\n  <a class='navbar-brand' href='#'>Navbar</a>\n  <button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarSupportedContent'\n    aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation'>\n    <span class='navbar-toggler-icon'></span>\n  </button>\n  <div class='collapse navbar-collapse' id='navbarSupportedContent'>\n    <ul class='navbar-nav mr-auto'>\n      <li class='nav-item active'>\n        <a class='nav-link' href='#'>Home <span class='sr-only'>(current)</span></a>\n      </li>\n      <li class='nav-item'>\n        <a class='nav-link' href='#'>Link</a>\n      </li>\n      <li class='nav-item'>\n        <a class='nav-link disabled' href='#'>Disabled</a>\n      </li>\n    </ul>\n    <form class='form-inline my-2 my-lg-0'>\n      <input class='form-control mr-sm-2' type='search' placeholder='Search' aria-label='Search'>\n      <button class='btn btn-outline-success my-2 my-sm-0' type='submit'>Search</button>\n    </form>\n  </div>\n</nav>"
        },
        {
          "question": "Create a responsive card layout using Bootstrap.",
          "solution": "<div class='card' style='width: 18rem;'>\n  <img class='card-img-top' src='...' alt='Card image cap'>\n  <div class='card-body'>\n    <h5 class='card-title'>Card title</h5>\n    <p class='card-text'>Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n    <a href='#' class='btn btn-primary'>Go somewhere</a>\n  </div>\n</div>"
        },
        {
          "question": "Implement a responsive carousel/slider using Bootstrap.",
          "solution": "<div id='carouselExampleIndicators' class='carousel slide' data-ride='carousel'>\n  <ol class='carousel-indicators'>\n    <li data-target='#carouselExampleIndicators' data-slide-to='0' class='active'></li>\n    <li data-target='#carouselExampleIndicators' data-slide-to='1'></li>\n    <li data-target='#carouselExampleIndicators' data-slide-to='2'></li>\n  </ol>\n  <div class='carousel-inner'>\n    <div class='carousel-item active'>\n      <img class='d-block w-100' src='...' alt='First slide'>\n    </div>\n    <div class='carousel-item'>\n      <img class='d-block w-100' src='...' alt='Second slide'>\n    </div>\n    <div class='carousel-item'>\n      <img class='d-block w-100' src='...' alt='Third slide'>\n    </div>\n  </div>\n  <a class='carousel-control-prev' href='#carouselExampleIndicators' role='button' data-slide='prev'>\n    <span class='carousel-control-prev-icon' aria-hidden='true'></span>\n    <span class='sr-only'>Previous</span>\n  </a>\n  <a class='carousel-control-next' href='#carouselExampleIndicators' role='button' data-slide='next'>\n    <span class='carousel-control-next-icon' aria-hidden='true'></span>\n    <span class='sr-only'>Next</span>\n  </a>\n</div>"
        },
        {
          "question": "Design a responsive form layout using Bootstrap.",
          "solution": "<form>\n  <div class='form-group'>\n    <label for='exampleInputEmail1'>Email address</label>\n    <input type='email' class='form-control' id='exampleInputEmail1' aria-describedby='emailHelp' placeholder='Enter email'>\n    <small id='emailHelp' class='form-text text-muted'>We'll never share your email with anyone else.</small>\n  </div>\n  <div class='form-group'>\n    <label for='exampleInputPassword1'>Password</label>\n    <input type='password' class='form-control' id='exampleInputPassword1' placeholder='Password'>\n  </div>\n  <div class='form-group form-check'>\n    <input type='checkbox' class='form-check-input' id='exampleCheck1'>\n    <label class='form-check-label' for='exampleCheck1'>Check me out</label>\n  </div>\n  <button type='submit' class='btn btn-primary'>Submit</button>\n</form>"
        },
        {
          "question": "Create a responsive table using Bootstrap.",
          "solution": "<table class='table'>\n  <thead class='thead-dark'>\n    <tr>\n      <th scope='col'>#</th>\n      <th scope='col'>First Name</th>\n      <th scope='col'>Last Name</th>\n      <th scope='col'>Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope='row'>1</th>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <th scope='row'>2</th>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <th scope='row'>3</th>\n      <td>Larry</td>\n      <td>the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>"
        },
        {
          "question": "Implement a modal dialog using Bootstrap.",
          "solution": "<!-- Button trigger modal -->\n<button type='button' class='btn btn-primary' data-toggle='modal' data-target='#exampleModal'>\n  Launch demo modal\n</button>\n\n<!-- Modal -->\n<div class='modal fade' id='exampleModal' tabindex='-1' role='dialog' aria-labelledby='exampleModalLabel' aria-hidden='true'>\n  <div class='modal-dialog' role='document'>\n    <div class='modal-content'>\n      <div class='modal-header'>\n        <h5 class='modal-title' id='exampleModalLabel'>Modal title</h5>\n        <button type='button' class='close' data-dismiss='modal' aria-label='Close'>\n          <span aria-hidden='true'>&times;</span>\n        </button>\n      </div>\n      <div class='modal-body'>\n        ...\n      </div>\n      <div class='modal-footer'>\n        <button type='button' class='btn btn-secondary' data-dismiss='modal'>Close</button>\n        <button type='button' class='btn btn-primary'>Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
          "question": "Create a responsive grid layout with three columns of equal width.",
          "solution": "<div class='container'>\n  <div class='row'>\n    <div class='col'>Column 1</div>\n    <div class='col'>Column 2</div>\n    <div class='col'>Column 3</div>\n  </div>\n</div>"
        },
        {
          "question": "Design a responsive jumbotron with a background image and centered text.",
          "solution": "<div class='jumbotron' style='background-image: url(\"jumbotron.jpg\"); background-size: cover;'>\n  <h1 class='display-4 text-center text-white'>Welcome to Our Website</h1>\n  <p class='lead text-center text-white'>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\n</div>"
        },
        {
          "question": "Implement a responsive card deck with three cards in a row.",
          "solution": "<div class='card-deck'>\n  <div class='card'>\n    <img class='card-img-top' src='card1.jpg' alt='Card image cap'>\n    <div class='card-body'>\n      <h5 class='card-title'>Card 1</h5>\n      <p class='card-text'>This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n    </div>\n  </div>\n  <div class='card'>\n    <img class='card-img-top' src='card2.jpg' alt='Card image cap'>\n    <div class='card-body'>\n      <h5 class='card-title'>Card 2</h5>\n      <p class='card-text'>This card has supporting text below as a natural lead-in to additional content.</p>\n    </div>\n  </div>\n  <div class='card'>\n    <img class='card-img-top' src='card3.jpg' alt='Card image cap'>\n    <div class='card-body'>\n      <h5 class='card-title'>Card 3</h5>\n      <p class='card-text'>This is a wider card with supporting text below as a natural lead-in to additional content.</p>\n    </div>\n  </div>\n</div>"
        },
        {
          "question": "Create a responsive pagination component.",
          "solution": "<nav aria-label='Page navigation example'>\n  <ul class='pagination justify-content-center'>\n    <li class='page-item'><a class='page-link' href='#'>Previous</a></li>\n    <li class='page-item'><a class='page-link' href='#'>1</a></li>\n    <li class='page-item'><a class='page-link' href='#'>2</a></li>\n    <li class='page-item'><a class='page-link' href='#'>3</a></li>\n    <li class='page-item'><a class='page-link' href='#'>Next</a></li>\n  </ul>\n</nav>"
        },
        {
          "question": "Design a responsive progress bar with a striped style.",
          "solution": "<div class='progress'>\n  <div class='progress-bar progress-bar-striped' role='progressbar' style='width: 75%' aria-valuenow='75' aria-valuemin='0' aria-valuemax='100'></div>\n</div>"
        }
      ]
    },
    {
      "name": "R",
      "problems": [
        {
          "question": "Create a variable 'x' and assign it the value 5.",
          "solution": "# Assigning value to a variable\nx <- 5\nprint(x)"
        },
        {
          "question": "Write a program to calculate the factorial of a number.",
          "solution": "# Function to calculate factorial\nfactorial <- function(n) {\n  if (n == 0)\n    return(1)\n  else\n    return(n * factorial(n-1))\n}\n\n# Example usage\nnum <- 5\nresult <- factorial(num)\nprint(paste('Factorial of', num, 'is', result))"
        },
        {
          "question": "Create a vector 'numbers' containing elements from 1 to 10.",
          "solution": "# Creating a vector\nnumbers <- 1:10\nprint(numbers)"
        },
        {
          "question": "Write a program to find the sum of elements in a vector.",
          "solution": "# Finding sum of elements in a vector\nnumbers <- c(1, 2, 3, 4, 5)\nsum <- sum(numbers)\nprint(paste('Sum of elements:', sum))"
        },
        {
          "question": "Create a function to check if a number is prime or not.",
          "solution": "# Function to check prime number\nis_prime <- function(num) {\n  if (num <= 1)\n    return(FALSE)\n  for (i in 2:(num-1)) {\n    if (num %% i == 0)\n      return(FALSE)\n  }\n  return(TRUE)\n}\n\n# Example usage\nnumber <- 13\nif (is_prime(number))\n  print(paste(number, 'is a prime number.'))\nelse\n  print(paste(number, 'is not a prime number.'))"
        },
        {
          "question": "Write a program to reverse a string.",
          "solution": "# Function to reverse a string\nreverse_string <- function(str) {\n  return(paste(rev(strsplit(str, '')[[1]]), collapse=''))\n}\n\n# Example usage\ninput_string <- 'Hello, World!'\nreversed <- reverse_string(input_string)\nprint(paste('Reversed string:', reversed))"
        },
        {
          "question": "Create a program to calculate the mean of elements in a vector.",
          "solution": "# Finding mean of elements in a vector\nnumbers <- c(1, 2, 3, 4, 5)\nmean_value <- mean(numbers)\nprint(paste('Mean of elements:', mean_value))"
        },
        {
          "question": "Write a function to check if a string is a palindrome.",
          "solution": "# Function to check palindrome\nis_palindrome <- function(str) {\n  str <- gsub('[[:punct:] ]', '', str)\n  str <- tolower(str)\n  return(str == rev(str))\n}\n\n# Example usage\ninput_str <- 'A man, a plan, a canal, Panama!'\nif (is_palindrome(input_str))\n  print(paste(input_str, 'is a palindrome.'))\nelse\n  print(paste(input_str, 'is not a palindrome.'))"
        },
        {
          "question": "Create a program to calculate the Fibonacci series up to n terms.",
          "solution": "# Function to generate Fibonacci series\nfibonacci <- function(n) {\n  fib <- numeric(n)\n  fib[1] <- 0\n  fib[2] <- 1\n  for (i in 3:n) {\n    fib[i] <- fib[i-1] + fib[i-2]\n  }\n  return(fib)\n}\n\n# Example usage\nnum_terms <- 10\nfib_series <- fibonacci(num_terms)\nprint(paste('Fibonacci series up to', num_terms, 'terms:', paste(fib_series, collapse=', ')))"
        },
        {
          "question": "Write a program to find the maximum and minimum elements in a vector.",
          "solution": "# Finding maximum and minimum elements in a vector\nnumbers <- c(12, 34, 56, 23, 89, 45)\nmax_value <- max(numbers)\nmin_value <- min(numbers)\nprint(paste('Maximum value:', max_value))\nprint(paste('Minimum value:', min_value))"
        },
        {
          "question": "Create a program to calculate the factorial of a number using recursion.",
          "solution": "# Function to calculate factorial using recursion\nfactorial <- function(n) {\n  if (n == 0)\n    return(1)\n  else\n    return(n * factorial(n-1))\n}\n\n# Example usage\nnum <- 5\nresult <- factorial(num)\nprint(paste('Factorial of', num, 'is', result))"
        },
        {
          "question": "Write a program to count the number of words in a string.",
          "solution": "# Function to count words in a string\ncount_words <- function(str) {\n  words <- strsplit(str, ' ')[[1]]\n  return(length(words))\n}\n\n# Example usage\ninput_str <- 'This is a sample sentence.'\nword_count <- count_words(input_str)\nprint(paste('Number of words:', word_count))"
        },
        {
          "question": "Create a program to find the sum of first n natural numbers.",
          "solution": "# Finding sum of first n natural numbers\nsum_of_natural_numbers <- function(n) {\n  return(n * (n + 1) / 2)\n}\n\n# Example usage\nnum <- 10\nsum <- sum_of_natural_numbers(num)\nprint(paste('Sum of first', num, 'natural numbers is', sum))"
        },
        {
          "question": "Write a function to find the GCD (Greatest Common Divisor) of two numbers.",
          "solution": "# Function to find GCD of two numbers\ngcd <- function(a, b) {\n  while (b != 0) {\n    temp <- b\n    b <- a %% b\n    a <- temp\n  }\n  return(a)\n}\n\n# Example usage\nnum1 <- 36\nnum2 <- 60\nresult <- gcd(num1, num2)\nprint(paste('GCD of', num1, 'and', num2, 'is', result))"
        },
        {
          "question": "Create a program to find the Armstrong numbers between two given numbers.",
          "solution": "# Function to check Armstrong number\nis_armstrong <- function(num) {\n  digits <- nchar(num)\n  sum <- sum(as.numeric(strsplit(as.character(num), '')[[1]])^digits)\n  return(sum == num)\n}\n\n# Finding Armstrong numbers between two numbers\nfind_armstrong_numbers <- function(start, end) {\n  armstrong_numbers <- c()\n  for (num in start:end) {\n    if (is_armstrong(num))\n      armstrong_numbers <- c(armstrong_numbers, num)\n  }\n  return(armstrong_numbers)\n}\n\n# Example usage\nstart_num <- 100\nend_num <- 1000\narmstrong_nums <- find_armstrong_numbers(start_num, end_num)\nprint(paste('Armstrong numbers between', start_num, 'and', end_num, 'are:', paste(armstrong_nums, collapse=', ')))"
        },
        {
          "question": "Write a program to find the sum of digits of a number.",
          "solution": "# Function to find sum of digits of a number\nsum_of_digits <- function(num) {\n  sum <- 0\n  while (num > 0) {\n    sum <- sum + (num %% 10)\n    num <- num %/% 10\n  }\n  return(sum)\n}\n\n# Example usage\nnumber <- 12345\nsum <- sum_of_digits(number)\nprint(paste('Sum of digits of', number, 'is', sum))"
        },
        {
          "question": "Create a program to check if a number is perfect or not.",
          "solution": "# Function to check perfect number\nis_perfect <- function(num) {\n  sum_divisors <- sum(which(num %% 1:num == 0)) - num\n  return(sum_divisors == num)\n}\n\n# Example usage\nnumber <- 28\nif (is_perfect(number))\n  print(paste(number, 'is a perfect number.'))\nelse\n  print(paste(number, 'is not a perfect number.'))"
        },
        {
          "question": "Write a program to sort elements in an array in descending order.",
          "solution": "# Function to sort elements in descending order\nsort_desc <- function(arr) {\n  return(sort(arr, decreasing = TRUE))\n}\n\n# Example usage\nnumbers <- c(5, 2, 8, 1, 6)\nsorted_numbers <- sort_desc(numbers)\nprint(paste('Sorted numbers in descending order:', paste(sorted_numbers, collapse=', ')))"
        }
      ]
    },
    {
      "name": "Kotlin",
      "problems": [
        {
          "question": "Write a Kotlin program to display 'Hello, World!'",
          "solution": "fun main() {\n    println(\"Hello, World!\")\n}"
        },
        {
          "question": "Create a program to calculate the factorial of a number.",
          "solution": "fun factorial(n: Int): Int {\n    return if (n == 0) 1 else n * factorial(n - 1)\n}\n\nfun main() {\n    val num = 5\n    println(\"Factorial of $num is: ${factorial(num)}\")\n}"
        },
        {
          "question": "Write a program to find the sum of elements in an array.",
          "solution": "fun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 5)\n    var sum = 0\n    for (element in arr) {\n        sum += element\n    }\n    println(\"Sum of array elements: $sum\")\n}"
        },
        {
          "question": "Create a program to check if a number is prime or not.",
          "solution": "fun isPrime(num: Int): Boolean {\n    if (num <= 1)\n        return false\n    for (i in 2..num / 2) {\n        if (num % i == 0)\n            return false\n    }\n    return true\n}\n\nfun main() {\n    val num = 17\n    if (isPrime(num))\n        println(\"$num is a prime number\")\n    else\n        println(\"$num is not a prime number\")\n}"
        },
        {
          "question": "Write a program to reverse a string.",
          "solution": "fun main() {\n    val str = \"Hello, Kotlin!\"\n    val reversed = str.reversed()\n    println(\"Reversed string: $reversed\")\n}"
        },
        {
          "question": "Create a program to find the Fibonacci series up to n terms.",
          "solution": "fun fibonacci(n: Int) {\n    var a = 0\n    var b = 1\n    print(\"Fibonacci Series up to $n terms: \")\n    for (i in 1..n) {\n        print(\"$a \")\n        val sum = a + b\n        a = b\n        b = sum\n    }\n}\n\nfun main() {\n    val n = 10\n    fibonacci(n)\n}"
        },
        {
          "question": "Write a program to find the GCD (Greatest Common Divisor) of two numbers.",
          "solution": "fun gcd(a: Int, b: Int): Int {\n    var x = a\n    var y = b\n    while (y != 0) {\n        val temp = y\n        y = x % y\n        x = temp\n    }\n    return x\n}\n\nfun main() {\n    val num1 = 36\n    val num2 = 60\n    println(\"GCD of $num1 and $num2 is: ${gcd(num1, num2)}\")\n}"
        },
        {
          "question": "Create a program to check if a string is a palindrome.",
          "solution": "fun isPalindrome(str: String): Boolean {\n    val cleanStr = str.replace(\"[\\s,;.!'\",(){}\\[\\]]\", \"\").toLowerCase()\n    return cleanStr == cleanStr.reversed()\n}\n\nfun main() {\n    val str = \"A man, a plan, a canal, Panama!\"\n    if (isPalindrome(str))\n        println(\"$str is a palindrome\")\n    else\n        println(\"$str is not a palindrome\")\n}"
        },
        {
          "question": "Write a program to find the factorial of a number using tail recursion.",
          "solution": "tailrec fun factorial(n: Int, result: Int = 1): Int {\n    return if (n == 0) result else factorial(n - 1, result * n)\n}\n\nfun main() {\n    val num = 5\n    println(\"Factorial of $num is: ${factorial(num)}\")\n}"
        },
        {
          "question": "Create a program to find the sum of first n natural numbers.",
          "solution": "fun sumOfNaturalNumbers(n: Int): Int {\n    return n * (n + 1) / 2\n}\n\nfun main() {\n    val n = 100\n    println(\"Sum of first $n natural numbers is: ${sumOfNaturalNumbers(n)}\")\n}"
        },
        {
          "question": "Write a program to check if a number is Armstrong number or not.",
          "solution": "fun isArmstrong(num: Int): Boolean {\n    var temp = num\n    val digits = num.toString().length\n    var sum = 0\n    while (temp != 0) {\n        val remainder = temp % 10\n        sum += Math.pow(remainder.toDouble(), digits.toDouble()).toInt()\n        temp /= 10\n    }\n    return sum == num\n}\n\nfun main() {\n    val num = 153\n    if (isArmstrong(num))\n        println(\"$num is an Armstrong number\")\n    else\n        println(\"$num is not an Armstrong number\")\n}"
        },
        {
          "question": "Create a program to print all prime numbers between two given numbers.",
          "solution": "fun isPrime(num: Int): Boolean {\n    if (num <= 1)\n        return false\n    for (i in 2..num / 2) {\n        if (num % i == 0)\n            return false\n    }\n    return true\n}\n\nfun main() {\n    val start = 10\n    val end = 50\n    println(\"Prime numbers between $start and $end are:\")\n    for (num in start..end) {\n        if (isPrime(num))\n            println(num)\n    }\n}"
        },
        {
          "question": "Write a program to find the sum of digits of a number.",
          "solution": "fun sumOfDigits(num: Int): Int {\n    var n = num\n    var sum = 0\n    while (n != 0) {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\nfun main() {\n    val num = 12345\n    println(\"Sum of digits of $num is: ${sumOfDigits(num)}\")\n}"
        },
        {
          "question": "Create a program to reverse a number.",
          "solution": "fun reverseNumber(num: Int): Int {\n    var n = num\n    var reversed = 0\n    while (n != 0) {\n        val digit = n % 10\n        reversed = reversed * 10 + digit\n        n /= 10\n    }\n    return reversed\n}\n\nfun main() {\n    val num = 12345\n    println(\"Reversed number of $num is: ${reverseNumber(num)}\")\n}"
        },
        {
          "question": "Write a program to find the LCM (Least Common Multiple) of two numbers.",
          "solution": "fun gcd(a: Int, b: Int): Int {\n    var x = a\n    var y = b\n    while (y != 0) {\n        val temp = y\n        y = x % y\n        x = temp\n    }\n    return x\n}\n\nfun lcm(a: Int, b: Int): Int {\n    return a * b / gcd(a, b)\n}\n\nfun main() {\n    val num1 = 24\n    val num2 = 36\n    println(\"LCM of $num1 and $num2 is: ${lcm(num1, num2)}\")\n}"
        },
        {
          "question": "Create a program to check if a number is a perfect number or not.",
          "solution": "fun isPerfectNumber(num: Int): Boolean {\n    var sum = 0\n    for (i in 1 until num) {\n        if (num % i == 0)\n            sum += i\n    }\n    return sum == num\n}\n\nfun main() {\n    val num = 28\n    if (isPerfectNumber(num))\n        println(\"$num is a perfect number\")\n    else\n        println(\"$num is not a perfect number\")\n}"
        }
      ]
    },
    {
      "name": "Node.js",
      "problems": [
        {
          "question": "Create a Node.js server that listens on port 3000 and displays 'Hello, World!' when accessed through a web browser.",
          "solution": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to read a file 'example.txt' and print its contents to the console.",
          "solution": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});"
        },
        {
          "question": "Create a Node.js program to handle GET requests and return 'Hello, World!' as response.",
          "solution": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to find the sum of numbers in an array.",
          "solution": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\nconsole.log('Sum of numbers:', sum);"
        },
        {
          "question": "Create a Node.js program to perform CRUD operations on a MongoDB database.",
          "solution": "const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  email: String,\n  age: Number\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Example of CRUD operations\n// Insert\nconst newUser = new User({ name: 'John Doe', email: 'john.doe@example.com', age: 30 });\nnewUser.save();\n\n// Find\nUser.find({}, (err, users) => {\n  if (err) throw err;\n  console.log(users);\n});\n\n// Update\nUser.updateOne({ name: 'John Doe' }, { age: 31 }, (err) => {\n  if (err) throw err;\n  console.log('User updated successfully');\n});\n\n// Delete\nUser.deleteOne({ name: 'John Doe' }, (err) => {\n  if (err) throw err;\n  console.log('User deleted successfully');\n});"
        },
        {
          "question": "Write a Node.js program to handle POST requests and return the received data.",
          "solution": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  let body = '';\n  req.on('data', (chunk) => {\n    body += chunk.toString();\n  });\n  req.on('end', () => {\n    console.log('Received data:', body);\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Received data: ' + body);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Create a Node.js program to handle file uploads using multer middleware.",
          "solution": "const express = require('express');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\nconst app = express();\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to implement basic authentication using middleware.",
          "solution": "const express = require('express');\nconst app = express();\n\nconst basicAuth = require('express-basic-auth');\n\nconst users = {\n  'admin': 'password'\n};\n\napp.use(basicAuth({\n  users: users,\n  challenge: true,\n}));\n\napp.get('/', (req, res) => {\n  res.send('Authenticated!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Create a Node.js program to send emails using nodemailer library.",
          "solution": "const nodemailer = require('nodemailer');\n\nlet transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your_email@gmail.com',\n    pass: 'your_password'\n  }\n});\n\nlet mailOptions = {\n  from: 'your_email@gmail.com',\n  to: 'recipient_email@example.com',\n  subject: 'Sending Email using Node.js',\n  text: 'Hello from Node.js!'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});"
        },
        {
          "question": "Write a Node.js program to handle form submissions using Express framework.",
          "solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post('/submit', (req, res) => {\n  const { name, email } = req.body;\n  res.send(`Form submitted: Name - ${name}, Email - ${email}`);\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Create a Node.js program to implement a RESTful API using Express.",
          "solution": "const express = require('express');\nconst app = express();\n\nconst users = [\n  { id: 1, name: 'John Doe' },\n  { id: 2, name: 'Jane Smith' }\n];\n\napp.get('/api/users', (req, res) => {\n  res.json(users);\n});\n\napp.post('/api/users', (req, res) => {\n  const newUser = { id: users.length + 1, name: req.body.name };\n  users.push(newUser);\n  res.json(newUser);\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to read and parse JSON data from a file.",
          "solution": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf8', (err, data) => {\n  if (err) throw err;\n  const jsonData = JSON.parse(data);\n  console.log(jsonData);\n});"
        },
        {
          "question": "Write a Node.js program to implement a simple chat server using WebSocket.",
          "solution": "const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('Received: %s', message);\n    ws.send(`You sent: ${message}`);\n  });\n  ws.send('Welcome to the WebSocket server!');\n});"
        },
        {
          "question": "Create a Node.js program to implement a basic CRUD API for a 'users' collection using Express and MongoDB.",
          "solution": "const express = require('express');\nconst mongoose = require('mongoose');\nconst app = express();\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst User = mongoose.model('User', {\n  name: String,\n  email: String,\n  age: Number\n});\n\napp.use(express.json());\n\n// CRUD operations\napp.post('/users', async (req, res) => {\n  const newUser = new User(req.body);\n  await newUser.save();\n  res.json(newUser);\n});\n\napp.get('/users', async (req, res) => {\n  const users = await User.find();\n  res.json(users);\n});\n\napp.put('/users/:id', async (req, res) => {\n  const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });\n  res.json(updatedUser);\n});\n\napp.delete('/users/:id', async (req, res) => {\n  const deletedUser = await User.findByIdAndDelete(req.params.id);\n  res.json(deletedUser);\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to handle errors using middleware in Express.",
          "solution": "const express = require('express');\nconst app = express();\n\n// Middleware to handle errors\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\napp.get('/', (req, res) => {\n  throw new Error('Example error');\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Create a Node.js program to implement pagination for fetching data from MongoDB using Mongoose.",
          "solution": "const express = require('express');\nconst mongoose = require('mongoose');\nconst app = express();\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst User = mongoose.model('User', {\n  name: String,\n  email: String,\n  age: Number\n});\n\napp.get('/users', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const skip = (page - 1) * limit;\n\n  try {\n    const users = await User.find().skip(skip).limit(limit);\n    res.json(users);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        },
        {
          "question": "Write a Node.js program to implement session-based authentication using express-session middleware.",
          "solution": "const express = require('express');\nconst session = require('express-session');\nconst app = express();\n\napp.use(session({\n  secret: 'secret',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\n// Middleware to check if user is authenticated\nconst checkAuth = (req, res, next) => {\n  if (req.session.authenticated) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n};\n\napp.post('/login', (req, res) => {\n  if (req.body.username === 'admin' && req.body.password === 'password') {\n    req.session.authenticated = true;\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', checkAuth, (req, res) => {\n  res.send('Protected route');\n});\n\napp.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
        }
      ]
    },
    {
      "name": "React",
      "problems": [
        {
          "question": "Create a basic React component that renders 'Hello, World!'",
          "solution": "import React from 'react';\n\nfunction HelloWorld() {\n    return (\n        <div>\n            <h1>Hello, World!</h1>\n        </div>\n    );\n}\n\nexport default HelloWorld;"
        },
        {
          "question": "Write a React component that displays a list of items passed as props.",
          "solution": "import React from 'react';\n\nfunction ItemList(props) {\n    return (\n        <ul>\n            {props.items.map((item, index) => (\n                <li key={index}>{item}</li>\n            ))}\n        </ul>\n    );\n}\n\nexport default ItemList;"
        },
        {
          "question": "Create a React component with state that increments a counter on button click.",
          "solution": "import React, { useState } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Count: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increment</button>\n        </div>\n    );\n}\n\nexport default Counter;"
        },
        {
          "question": "Write a React component that fetches data from an API and displays it.",
          "solution": "import React, { useState, useEffect } from 'react';\n\nfunction UserList() {\n    const [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(data => setUsers(data));\n    }, []);\n\n    return (\n        <div>\n            <h1>User List</h1>\n            <ul>\n                {users.map(user => (\n                    <li key={user.id}>{user.name}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default UserList;"
        },
        {
          "question": "Create a React form component with controlled inputs.",
          "solution": "import React, { useState } from 'react';\n\nfunction Form() {\n    const [formData, setFormData] = useState({\n        username: '',\n        email: ''\n    });\n\n    const handleChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Handle form submission\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>Username:\n                <input type='text' name='username' value={formData.username} onChange={handleChange} />\n            </label>\n            <label>Email:\n                <input type='email' name='email' value={formData.email} onChange={handleChange} />\n            </label>\n            <button type='submit'>Submit</button>\n        </form>\n    );\n}\n\nexport default Form;"
        },
        {
          "question": "Write a React component that toggles visibility of content on button click.",
          "solution": "import React, { useState } from 'react';\n\nfunction ToggleContent() {\n    const [isVisible, setIsVisible] = useState(false);\n\n    const toggleVisibility = () => {\n        setIsVisible(!isVisible);\n    };\n\n    return (\n        <div>\n            <button onClick={toggleVisibility}>Toggle Content</button>\n            {isVisible && <p>This content is toggled.</p>}\n        </div>\n    );\n}\n\nexport default ToggleContent;"
        },
        {
          "question": "Create a React component that filters and displays a list of items based on user input.",
          "solution": "import React, { useState } from 'react';\n\nfunction FilteredList({ items }) {\n    const [filter, setFilter] = useState('');\n\n    const filteredItems = items.filter(item =>\n        item.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return (\n        <div>\n            <input type='text' placeholder='Filter items...' value={filter} onChange={(e) => setFilter(e.target.value)} />\n            <ul>\n                {filteredItems.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default FilteredList;"
        },
        {
          "question": "Write a React component that implements a simple counter with increment and decrement buttons.",
          "solution": "import React, { useState } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n\n    const increment = () => {\n        setCount(count + 1);\n    };\n\n    const decrement = () => {\n        setCount(count - 1);\n    };\n\n    return (\n        <div>\n            <button onClick={decrement}>-</button>\n            <span>{count}</span>\n            <button onClick={increment}>+</button>\n        </div>\n    );\n}\n\nexport default Counter;"
        },
        {
          "question": "Create a React component that renders a list of items with delete functionality.",
          "solution": "import React, { useState } from 'react';\n\nfunction ItemList({ items }) {\n    const [itemList, setItemList] = useState(items);\n\n    const deleteItem = (index) => {\n        const updatedList = [...itemList];\n        updatedList.splice(index, 1);\n        setItemList(updatedList);\n    };\n\n    return (\n        <ul>\n            {itemList.map((item, index) => (\n                <li key={index}>\n                    {item} <button onClick={() => deleteItem(index)}>Delete</button>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nexport default ItemList;"
        },
        {
          "question": "Write a React component that renders a simple todo list with add and delete functionality.",
          "solution": "import React, { useState } from 'react';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n    const [inputValue, setInputValue] = useState('');\n\n    const addTodo = () => {\n        if (inputValue.trim() !== '') {\n            setTodos([...todos, inputValue]);\n            setInputValue('');\n        }\n    };\n\n    const deleteTodo = (index) => {\n        const updatedTodos = [...todos];\n        updatedTodos.splice(index, 1);\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div>\n            <input type='text' value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n            <button onClick={addTodo}>Add Todo</button>\n            <ul>\n                {todos.map((todo, index) => (\n                    <li key={index}>\n                        {todo} <button onClick={() => deleteTodo(index)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default TodoList;"
        },
        {
          "question": "Create a React component that uses props.children to render its children elements.",
          "solution": "import React from 'react';\n\nfunction ParentComponent({ children }) {\n    return (\n        <div>\n            <h1>Parent Component</h1>\n            <div>{children}</div>\n        </div>\n    );\n}\n\nexport default ParentComponent;\n\n// Usage:\n// <ParentComponent>\n//    <ChildComponent1 />\n//    <ChildComponent2 />\n// </ParentComponent>"
        },
        {
          "question": "Write a React component that uses useEffect to fetch data from an API and updates state.",
          "solution": "import React, { useState, useEffect } from 'react';\n\nfunction UserList() {\n    const [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(data => setUsers(data));\n    }, []);\n\n    return (\n        <div>\n            <h1>User List</h1>\n            <ul>\n                {users.map(user => (\n                    <li key={user.id}>{user.name}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default UserList;"
        },
        {
          "question": "Write a React component that implements a simple search filter.",
          "solution": "import React, { useState } from 'react';\n\nfunction SearchFilter({ data }) {\n    const [query, setQuery] = useState('');\n\n    const filteredData = data.filter(item =>\n        item.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return (\n        <div>\n            <input type='text' value={query} onChange={(e) => setQuery(e.target.value)} placeholder='Search...' />\n            <ul>\n                {filteredData.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default SearchFilter;"
        },
        {
          "question": "Create a React component that renders a form with validation (e.g., required fields).",
          "solution": "import React, { useState } from 'react';\n\nfunction FormWithValidation() {\n    const [formData, setFormData] = useState({\n        username: '',\n        email: ''\n    });\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n        setErrors({\n            ...errors,\n            [e.target.name]: e.target.value.trim() === ''\n        });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Validate form\n        if (formData.username.trim() === '' || formData.email.trim() === '') {\n            alert('Please fill in all fields.');\n            return;\n        }\n        // Handle form submission\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>Username:\n                <input type='text' name='username' value={formData.username} onChange={handleChange} />\n                {errors.username && <span style={{ color: 'red' }}>Username is required.</span>}\n            </label>\n            <label>Email:\n                <input type='email' name='email' value={formData.email} onChange={handleChange} />\n                {errors.email && <span style={{ color: 'red' }}>Email is required.</span>}\n            </label>\n            <button type='submit'>Submit</button>\n        </form>\n    );\n}\n\nexport default FormWithValidation;"
        },
        {
          "question": "Write a React component that fetches and displays data using useEffect with loading and error states.",
          "solution": "import React, { useState, useEffect } from 'react';\n\nfunction DataFetcher({ url }) {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response.json();\n            })\n            .then(data => setData(data))\n            .catch(error => setError(error))\n            .finally(() => setLoading(false));\n    }, [url]);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error: {error.message}</p>;\n    if (!data) return null;\n\n    return (\n        <div>\n            <h1>Data</h1>\n            <ul>\n                {data.map((item, index) => (\n                    <li key={index}>{item.title}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default DataFetcher;"
        },
        {
          "question": "Create a React component that uses useContext to manage global state.",
          "solution": "import React, { createContext, useContext, useState } from 'react';\n\nconst AppContext = createContext();\n\nfunction App() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <AppContext.Provider value={{ count, setCount }}>\n            <div>\n                <h1>Counter: {count}</h1>\n                <ChildComponent />\n            </div>\n        </AppContext.Provider>\n    );\n}\n\nfunction ChildComponent() {\n    const { count, setCount } = useContext(AppContext);\n\n    const increment = () => {\n        setCount(count + 1);\n    };\n\n    return (\n        <div>\n            <button onClick={increment}>Increment</button>\n        </div>\n    );\n}\n\nexport default App;"
        },
        {
          "question": "Write a React component that implements a simple modal (popup) with open and close functionality.",
          "solution": "import React, { useState } from 'react';\n\nfunction Modal() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const openModal = () => {\n        setIsOpen(true);\n    };\n\n    const closeModal = () => {\n        setIsOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={openModal}>Open Modal</button>\n            {isOpen && (\n                <div className='modal'>\n                    <div className='modal-content'>\n                        <span className='close' onClick={closeModal}>&times;</span>\n                        <p>Modal content goes here.</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Modal;"
        }
      ]
    },
    {
      "name": "Vue.js",
      "problems": [
        {
          "question": "Create a Vue component that displays 'Hello, World!'",
          "solution": "<template>\n  <div>\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello, World!'\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to display a list of items using v-for directive.",
          "solution": "<template>\n  <div>\n    <ul>\n      <li v-for='(item, index) in items' :key='index'>{{ item }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: ['Item 1', 'Item 2', 'Item 3']\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component to handle user input with v-model directive.",
          "solution": "<template>\n  <div>\n    <input v-model='message'>\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: ''\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to toggle visibility of an element with v-if directive.",
          "solution": "<template>\n  <div>\n    <button @click='isVisible = !isVisible'>Toggle Element</button>\n    <p v-if='isVisible'>Toggleable Element</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isVisible: false\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component that computes and displays the sum of two numbers entered by the user.",
          "solution": "<template>\n  <div>\n    <input v-model.number='num1' type='number'>\n    <input v-model.number='num2' type='number'>\n    <p>Sum: {{ num1 + num2 }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      num1: 0,\n      num2: 0\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to fetch and display data from an API using axios.",
          "solution": "<template>\n  <div>\n    <ul>\n      <li v-for='user in users' :key='user.id'>{{ user.name }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      users: []\n    };\n  },\n  mounted() {\n    axios\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        this.users = response.data;\n      })\n      .catch(error => {\n        console.error('Error fetching data: ', error);\n      });\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component that emits an event when a button is clicked and the parent component listens for that event.",
          "solution": "<template>\n  <div>\n    <button @click='onClick'>Click me!</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    onClick() {\n      this.$emit('button-clicked');\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to filter a list of items based on user input.",
          "solution": "<template>\n  <div>\n    <input v-model='searchText'>\n    <ul>\n      <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Another Item' }\n      ],\n      searchText: ''\n    };\n  },\n  computed: {\n    filteredItems() {\n      return this.items.filter(item => item.name.toLowerCase().includes(this.searchText.toLowerCase()));\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component to handle form submission and display validation errors.",
          "solution": "<template>\n  <div>\n    <form @submit.prevent='submitForm'>\n      <input v-model='name' type='text' placeholder='Enter your name'>\n      <span v-if='!nameValid'>Name is required.</span>\n      <input v-model.number='age' type='number' placeholder='Enter your age'>\n      <span v-if='!ageValid'>Age must be a number.</span>\n      <button type='submit'>Submit</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: '',\n      age: '',\n      nameValid: true,\n      ageValid: true\n    };\n  },\n  methods: {\n    submitForm() {\n      this.nameValid = !!this.name;\n      this.ageValid = !isNaN(this.age);\n      if (this.nameValid && this.ageValid) {\n        // Handle form submission\n      }\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to implement a simple counter with increment and decrement buttons.",
          "solution": "<template>\n  <div>\n    <button @click='increment'>+</button>\n    <span>{{ count }}</span>\n    <button @click='decrement'>-</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    };\n  },\n  methods: {\n    increment() {\n      this.count++;\n    },\n    decrement() {\n      this.count--;\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component to implement a simple todo list with add, delete, and mark as complete functionalities.",
          "solution": "<template>\n  <div>\n    <input v-model='newTodo' @keyup.enter='addTodo'>\n    <ul>\n      <li v-for='(todo, index) in todos' :key='index'>\n        {{ todo.text }}\n        <button @click='deleteTodo(index)'>Delete</button>\n        <button @click='toggleComplete(index)'>{{ todo.completed ? 'Undo' : 'Complete' }}</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      todos: [],\n      newTodo: ''\n    };\n  },\n  methods: {\n    addTodo() {\n      if (this.newTodo.trim()) {\n        this.todos.push({ text: this.newTodo, completed: false });\n        this.newTodo = '';\n      }\n    },\n    deleteTodo(index) {\n      this.todos.splice(index, 1);\n    },\n    toggleComplete(index) {\n      this.todos[index].completed = !this.todos[index].completed;\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component that implements a simple timer which starts on button click and stops on another button click.",
          "solution": "<template>\n  <div>\n    <p v-if='running'>Timer: {{ seconds }} seconds</p>\n    <button v-if='!running' @click='startTimer'>Start Timer</button>\n    <button v-if='running' @click='stopTimer'>Stop Timer</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      running: false,\n      seconds: 0,\n      timer: null\n    };\n  },\n  methods: {\n    startTimer() {\n      this.running = true;\n      this.timer = setInterval(() => {\n        this.seconds++;\n      }, 1000);\n    },\n    stopTimer() {\n      this.running = false;\n      clearInterval(this.timer);\n      this.seconds = 0;\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to display a modal (dialog box) when a button is clicked.",
          "solution": "<template>\n  <div>\n    <button @click='showModal = true'>Show Modal</button>\n    <div v-if='showModal' class='modal'>\n      <div class='modal-content'>\n        <span class='close' @click='showModal = false'>&times;</span>\n        <p>Modal content goes here.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  display: block;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  background-color: white;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n\n<script>\nexport default {\n  data() {\n    return {\n      showModal: false\n    };\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component that implements a basic pagination system for a list of items.",
          "solution": "<template>\n  <div>\n    <ul>\n      <li v-for='page in pages' :key='page'>\n        <button @click='currentPage = page'>{{ page }}</button>\n      </li>\n    </ul>\n    <ul>\n      <li v-for='item in paginatedItems' :key='item.id'>{{ item.name }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Item 3' },\n        { id: 4, name: 'Item 4' },\n        { id: 5, name: 'Item 5' },\n        { id: 6, name: 'Item 6' }\n      ],\n      currentPage: 1,\n      itemsPerPage: 2\n    };\n  },\n  computed: {\n    paginatedItems() {\n      const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n      const endIndex = startIndex + this.itemsPerPage;\n      return this.items.slice(startIndex, endIndex);\n    },\n    pages() {\n      return Math.ceil(this.items.length / this.itemsPerPage);\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Write a Vue component to implement a simple image slider with previous and next buttons.",
          "solution": "<template>\n  <div>\n    <button @click='previousImage'>Previous</button>\n    <img :src='currentImage' alt='Slider Image'>\n    <button @click='nextImage'>Next</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      images: [\n        'image1.jpg',\n        'image2.jpg',\n        'image3.jpg'\n      ],\n      currentIndex: 0\n    };\n  },\n  computed: {\n    currentImage() {\n      return this.images[this.currentIndex];\n    }\n  },\n  methods: {\n    nextImage() {\n      this.currentIndex = (this.currentIndex + 1) % this.images.length;\n    },\n    previousImage() {\n      this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;\n    }\n  }\n}\n</script>"
        },
        {
          "question": "Create a Vue component to show a random quote fetched from an API on button click.",
          "solution": "<template>\n  <div>\n    <button @click='fetchQuote'>Get Quote</button>\n    <p>{{ quote }}</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      quote: ''\n    };\n  },\n  methods: {\n    fetchQuote() {\n      axios\n        .get('https://api.quotable.io/random')\n        .then(response => {\n          this.quote = response.data.content;\n        })\n        .catch(error => {\n          console.error('Error fetching quote: ', error);\n        });\n    }\n  }\n}\n</script>"
        }
      ]
    },
    {
      "name": "MySQL",
      "problems": [
        {
          "question": "Create a table named 'employees' with columns 'id', 'name', 'age', and 'salary'.",
          "solution": "CREATE TABLE employees (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    age INT,\n    salary DECIMAL(10, 2)\n);"
        },
        {
          "question": "Insert 3 records into the 'employees' table.",
          "solution": "INSERT INTO employees (name, age, salary) VALUES\n    ('John Doe', 30, 50000.00),\n    ('Jane Smith', 28, 45000.00),\n    ('Michael Johnson', 35, 60000.00);"
        },
        {
          "question": "Write a query to fetch all employees whose age is greater than 30.",
          "solution": "SELECT * FROM employees WHERE age > 30;"
        },
        {
          "question": "Update the salary of employee with id 1 to 55000.00.",
          "solution": "UPDATE employees SET salary = 55000.00 WHERE id = 1;"
        },
        {
          "question": "Delete the employee with id 3 from the 'employees' table.",
          "solution": "DELETE FROM employees WHERE id = 3;"
        },
        {
          "question": "Write a query to fetch employees sorted by their salary in descending order.",
          "solution": "SELECT * FROM employees ORDER BY salary DESC;"
        },
        {
          "question": "Create a table 'departments' with columns 'dept_id' and 'dept_name'.",
          "solution": "CREATE TABLE departments (\n    dept_id INT AUTO_INCREMENT PRIMARY KEY,\n    dept_name VARCHAR(100)\n);"
        },
        {
          "question": "Insert 3 records into the 'departments' table.",
          "solution": "INSERT INTO departments (dept_name) VALUES\n    ('IT'),\n    ('HR'),\n    ('Finance');"
        },
        {
          "question": "Write a query to fetch all employees along with their department names.",
          "solution": "SELECT e.name, e.salary, d.dept_name\nFROM employees e\nJOIN departments d ON e.dept_id = d.dept_id;"
        },
        {
          "question": "Add a new column 'dept_id' to the 'employees' table and set default value to 1.",
          "solution": "ALTER TABLE employees\nADD COLUMN dept_id INT DEFAULT 1;"
        },
        {
          "question": "Write a query to calculate the average salary of all employees.",
          "solution": "SELECT AVG(salary) AS average_salary FROM employees;"
        },
        {
          "question": "Create a table 'projects' with columns 'project_id' and 'project_name'.",
          "solution": "CREATE TABLE projects (\n    project_id INT AUTO_INCREMENT PRIMARY KEY,\n    project_name VARCHAR(100)\n);"
        },
        {
          "question": "Insert 3 records into the 'projects' table.",
          "solution": "INSERT INTO projects (project_name) VALUES\n    ('Project A'),\n    ('Project B'),\n    ('Project C');"
        },
        {
          "question": "Write a query to assign employees to Project A.",
          "solution": "INSERT INTO employee_projects (employee_id, project_id)\nSELECT id, (SELECT project_id FROM projects WHERE project_name = 'Project A')\nFROM employees;"
        },
        {
          "question": "Create a table 'employee_projects' with columns 'employee_id' and 'project_id'.",
          "solution": "CREATE TABLE employee_projects (\n    employee_id INT,\n    project_id INT,\n    PRIMARY KEY (employee_id, project_id),\n    FOREIGN KEY (employee_id) REFERENCES employees(id),\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);"
        },
        {
          "question": "Write a query to count the number of employees in each department.",
          "solution": "SELECT d.dept_name, COUNT(e.id) AS num_employees\nFROM departments d\nLEFT JOIN employees e ON d.dept_id = e.dept_id\nGROUP BY d.dept_name;"
        },
        {
          "question": "Delete all records from the 'employees' table.",
          "solution": "DELETE FROM employees;"
        },
        {
          "question": "Drop the 'departments' table.",
          "solution": "DROP TABLE departments;"
        },
        {
          "question": "Write a query to find the highest salary among all employees.",
          "solution": "SELECT MAX(salary) AS max_salary FROM employees;"
        },
        {
          "question": "Create a table 'customers' with columns 'customer_id', 'name', and 'email'.",
          "solution": "CREATE TABLE customers (\n    customer_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);"
        },
        {
          "question": "Insert 3 records into the 'customers' table.",
          "solution": "INSERT INTO customers (name, email) VALUES\n    ('Alice Johnson', 'alice@example.com'),\n    ('Bob Smith', 'bob@example.com'),\n    ('Eve Brown', 'eve@example.com');"
        }
      ]
    },
    {
      "name": "Sass",
      "problems": [
        {
          "question": "Create a variable in Sass and assign it a color value.",
          "solution": "// SCSS syntax\n$primary-color: #3498db;"
        },
        {
          "question": "Write a Sass mixin to apply a box-shadow with given parameters.",
          "solution": "// SCSS syntax\n@mixin box-shadow($x, $y, $blur, $color) {\n  box-shadow: $x $y $blur $color;\n}"
        },
        {
          "question": "Create a Sass function to convert pixels to ems.",
          "solution": "// SCSS syntax\n@function px-to-em($px, $base-font-size: 16px) {\n  @return #{$px / $base-font-size}em;\n}"
        },
        {
          "question": "Write a Sass mixin to create a responsive grid system.",
          "solution": "// SCSS syntax\n@mixin grid($columns: 12, $gap: 20px) {\n  display: grid;\n  grid-template-columns: repeat($columns, 1fr);\n  gap: $gap;\n}"
        },
        {
          "question": "Create a Sass variable for font stack and use it in a CSS rule.",
          "solution": "// SCSS syntax\n$font-stack: 'Roboto', Arial, sans-serif;\n\nbody {\n  font-family: $font-stack;\n}"
        },
        {
          "question": "Write a Sass mixin for responsive typography based on screen size.",
          "solution": "// SCSS syntax\n@mixin responsive-font-size($min-font-size, $max-font-size, $min-screen-size, $max-screen-size) {\n  font-size: $min-font-size;\n  @media screen and (min-width: $min-screen-size) {\n    font-size: calc(#{$min-font-size} + #{($max-font-size - $min-font-size)} * ((100vw - #{$min-screen-size}) / #{($max-screen-size - $min-screen-size)}));\n  }\n  @media screen and (min-width: $max-screen-size) {\n    font-size: $max-font-size;\n  }\n}"
        },
        {
          "question": "Create a Sass placeholder selector for a button style and use it in a CSS rule.",
          "solution": "// SCSS syntax\n%button-style {\n  padding: 10px 20px;\n  border: none;\n  background-color: #3498db;\n  color: white;\n  cursor: pointer;\n}\n\n.button {\n  @extend %button-style;\n}"
        },
        {
          "question": "Write a Sass function to calculate the contrast color of a given background color.",
          "solution": "// SCSS syntax\n@function contrast-color($background-color) {\n  // Convert hex to RGB values\n  $red: red($background-color);\n  $green: green($background-color);\n  $blue: blue($background-color);\n  // Calculate luminance\n  $luminance: 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;\n  // Return contrasting color based on luminance\n  @if ($luminance > 128) {\n    @return #000000; // Light background, return black\n  } @else {\n    @return #ffffff; // Dark background, return white\n  }\n}"
        },
        {
          "question": "Create a Sass mixin for flexbox layout with support for direction, align-items, and justify-content.",
          "solution": "// SCSS syntax\n@mixin flexbox($direction: row, $align: center, $justify: center) {\n  display: flex;\n  flex-direction: $direction;\n  align-items: $align;\n  justify-content: $justify;\n}"
        },
        {
          "question": "Write a Sass mixin to create a CSS triangle.",
          "solution": "// SCSS syntax\n@mixin triangle($size, $color) {\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 $size $size $size;\n  border-color: transparent transparent $color transparent;\n}"
        },
        {
          "question": "Create a Sass function to generate a random number within a specified range.",
          "solution": "// SCSS syntax\n@function random($min, $max) {\n  @return random() * ($max - $min) + $min;\n}"
        },
        {
          "question": "Write a Sass mixin to create a CSS animation with keyframes.",
          "solution": "// SCSS syntax\n@mixin bounce($distance, $duration) {\n  animation: bounce-animation $duration infinite;\n\n  @keyframes bounce-animation {\n    0%, 100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-$distance);\n    }\n  }\n}"
        },
        {
          "question": "Create a Sass variable for breakpoint sizes and use it in a media query.",
          "solution": "// SCSS syntax\n$breakpoint-medium: 768px;\n\n@media screen and (min-width: $breakpoint-medium) {\n  /* Styles for medium screens */\n}"
        },
        {
          "question": "Write a Sass mixin to create a CSS gradient background.",
          "solution": "// SCSS syntax\n@mixin gradient-background($color1, $color2) {\n  background: linear-gradient(to right, $color1, $color2);\n}"
        },
        {
          "question": "Create a Sass function to convert RGB color values to hexadecimal.",
          "solution": "// SCSS syntax\n@function rgb-to-hex($red, $green, $blue) {\n  $hex-red: str-slice(#{(100 + $red) * 255 / 256}, 2);\n  $hex-green: str-slice(#{(100 + $green) * 255 / 256}, 2);\n  $hex-blue: str-slice(#{(100 + $blue) * 255 / 256}, 2);\n  @return ##{$hex-red}#{$hex-green}#{$hex-blue};\n}"
        },
        {
          "question": "Write a Sass mixin for a responsive CSS grid layout with equal column widths.",
          "solution": "// SCSS syntax\n@mixin responsive-grid($columns, $gap) {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(0, 1fr));\n  gap: $gap;\n}"
        },
        {
          "question": "Create a Sass function to calculate the nth Fibonacci number.",
          "solution": "// SCSS syntax\n@function fibonacci($n) {\n  $a: 0;\n  $b: 1;\n  @for $i from 1 through $n {\n    $temp: $b;\n    $b: $a + $b;\n    $a: $temp;\n  }\n  @return $a;\n}"
        },
        {
          "question": "Write a Sass mixin to create a responsive navigation bar.",
          "solution": "// SCSS syntax\n@mixin responsive-navbar($bg-color, $text-color, $hover-bg-color) {\n  background-color: $bg-color;\n  color: $text-color;\n  a {\n    color: $text-color;\n    &:hover {\n      background-color: $hover-bg-color;\n    }\n  }\n}"
        },
        {
          "question": "Create a Sass mixin to create a CSS transition for a given property.",
          "solution": "// SCSS syntax\n@mixin transition($property, $duration) {\n  transition: $property $duration;\n}"
        },
        {
          "question": "Write a Sass function to check if a number is even or odd.",
          "solution": "// SCSS syntax\n@function is-even($number) {\n  @return $number % 2 == 0;\n}"
        },
        {
          "question": "Create a Sass mixin for a CSS card component.",
          "solution": "// SCSS syntax\n@mixin card($bg-color, $text-color, $border-radius) {\n  background-color: $bg-color;\n  color: $text-color;\n  border-radius: $border-radius;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}"
        }
      ]
    },
    {
      "name": "Canvas",
      "problems": [
        {
          "question": "Draw a red rectangle on a canvas with a width of 100px and height of 50px.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nctx.fillStyle = 'red';\nctx.fillRect(10, 10, 100, 50);\n</script>"
        },
        {
          "question": "Create a blue circle with a radius of 30px on a canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nctx.beginPath();\nctx.arc(100, 100, 30, 0, 2 * Math.PI);\nctx.fillStyle = 'blue';\nctx.fill();\n</script>"
        },
        {
          "question": "Draw a line from (50, 50) to (150, 100) on a canvas with a stroke color of green and a line width of 2px.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nctx.strokeStyle = 'green';\nctx.lineWidth = 2;\nctx.beginPath();\nctx.moveTo(50, 50);\nctx.lineTo(150, 100);\nctx.stroke();\n</script>"
        },
        {
          "question": "Create a gradient (linear or radial) on a canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar gradient = ctx.createLinearGradient(0, 0, 200, 0);\ngradient.addColorStop(0, 'red');\ngradient.addColorStop(1, 'white');\nctx.fillStyle = gradient;\nctx.fillRect(0, 0, 200, 100);\n</script>"
        },
        {
          "question": "Draw text 'Hello, Canvas!' in black color and font size 24px on a canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nctx.font = '24px Arial';\nctx.fillStyle = 'black';\nctx.fillText('Hello, Canvas!', 10, 50);\n</script>"
        },
        {
          "question": "Draw a rounded rectangle with a corner radius of 10px on a canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar radius = 10;\nvar width = 200;\nvar height = 100;\nctx.beginPath();\nctx.moveTo(radius, 0);\nctx.lineTo(width - radius, 0);\nctx.quadraticCurveTo(width, 0, width, radius);\nctx.lineTo(width, height - radius);\nctx.quadraticCurveTo(width, height, width - radius, height);\nctx.lineTo(radius, height);\nctx.quadraticCurveTo(0, height, 0, height - radius);\nctx.lineTo(0, radius);\nctx.quadraticCurveTo(0, 0, radius, 0);\nctx.closePath();\nctx.strokeStyle = 'black';\nctx.stroke();\n</script>"
        },
        {
          "question": "Create an animation of a moving square on a canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar x = 10;\nfunction drawSquare() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = 'red';\n  ctx.fillRect(x, 10, 50, 50);\n  x += 2;\n  requestAnimationFrame(drawSquare);\n}\ndrawSquare();\n</script>"
        },
        {
          "question": "Create a canvas-based drawing tool with different color options and line thickness.",
          "solution": "<canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #000000;\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar painting = false;\nfunction startPosition(e) {\n  painting = true;\n  draw(e);\n}\nfunction endPosition() {\n  painting = false;\n  ctx.beginPath();\n}\nfunction draw(e) {\n  if (!painting) return;\n  ctx.lineWidth = 5;\n  ctx.lineCap = 'round';\n  ctx.strokeStyle = 'blue';\n  ctx.lineTo(e.clientX, e.clientY - 60);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(e.clientX, e.clientY - 60);\n}\ncanvas.addEventListener('mousedown', startPosition);\ncanvas.addEventListener('mouseup', endPosition);\ncanvas.addEventListener('mousemove', draw);\n</script>"
        },
        {
          "question": "Create a canvas-based game with a moving object and collision detection.",
          "solution": "<canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #000000;\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar x = canvas.width / 2;\nvar y = canvas.height - 30;\nvar dx = 2;\nvar dy = -2;\nfunction drawBall() {\n  ctx.beginPath();\n  ctx.arc(x, y, 10, 0, Math.PI * 2);\n  ctx.fillStyle = 'red';\n  ctx.fill();\n  ctx.closePath();\n}\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawBall();\n  x += dx;\n  y += dy;\n  requestAnimationFrame(draw);\n}\ndraw();\n</script>"
        },
        {
          "question": "Create a canvas-based clock showing current time.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\" style=\"border:1px solid #000000;\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nfunction drawClock() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  var now = new Date();\n  var hours = now.getHours();\n  var minutes = now.getMinutes();\n  var seconds = now.getSeconds();\n  ctx.beginPath();\n  ctx.arc(100, 100, 80, 0, 2 * Math.PI);\n  ctx.strokeStyle = 'black';\n  ctx.stroke();\n  ctx.font = '30px Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText(hours + ':' + minutes + ':' + seconds, 100, 100);\n}\nsetInterval(drawClock, 1000);\n</script>"
        },
        {
          "question": "Create a canvas-based animation of a bouncing ball.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar x = canvas.width / 2;\nvar y = canvas.height - 30;\nvar dx = 2;\nvar dy = -2;\nfunction drawBall() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.arc(x, y, 10, 0, Math.PI * 2);\n  ctx.fillStyle = 'red';\n  ctx.fill();\n  ctx.closePath();\n}\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawBall();\n  if (x + dx > canvas.width - 10 || x + dx < 10) {\n    dx = -dx;\n  }\n  if (y + dy > canvas.height - 10 || y + dy < 10) {\n    dy = -dy;\n  }\n  x += dx;\n  y += dy;\n  requestAnimationFrame(draw);\n}\ndraw();\n</script>"
        },
        {
          "question": "Create a canvas-based animation of a rotating square.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar angle = 0;\nfunction drawSquare() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.save();\n  ctx.translate(100, 100);\n  ctx.rotate(angle * Math.PI / 180);\n  ctx.fillStyle = 'blue';\n  ctx.fillRect(-50, -50, 100, 100);\n  ctx.restore();\n  angle += 2;\n  requestAnimationFrame(drawSquare);\n}\ndrawSquare();\n</script>"
        },
        {
          "question": "Create a canvas-based animation of an expanding circle.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar radius = 10;\nfunction drawCircle() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.arc(100, 100, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = 'green';\n  ctx.fill();\n  radius += 2;\n  requestAnimationFrame(drawCircle);\n}\ndrawCircle();\n</script>"
        },
        {
          "question": "Create a canvas-based animation of a bouncing square inside the canvas.",
          "solution": "<canvas id=\"myCanvas\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar x = canvas.width / 2;\nvar y = canvas.height - 30;\nvar dx = 2;\nvar dy = -2;\nvar squareSize = 50;\nfunction drawSquare() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = 'red';\n  ctx.fillRect(x, y, squareSize, squareSize);\n  if (x + dx > canvas.width - squareSize || x + dx < 0) {\n    dx = -dx;\n  }\n  if (y + dy > canvas.height - squareSize || y + dy < 0) {\n    dy = -dy;\n  }\n  x += dx;\n  y += dy;\n  requestAnimationFrame(drawSquare);\n}\ndrawSquare();\n</script>"
        },
        {
          "question": "Create a canvas-based drawing tool with an eraser functionality.",
          "solution": "<canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #000000;\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar painting = false;\nfunction startPosition(e) {\n  painting = true;\n  draw(e);\n}\nfunction endPosition() {\n  painting = false;\n  ctx.beginPath();\n}\nfunction draw(e) {\n  if (!painting) return;\n  ctx.lineWidth = 10;\n  ctx.lineCap = 'round';\n  if (e.ctrlKey) {\n    ctx.strokeStyle = 'white';\n  } else {\n    ctx.strokeStyle = 'black';\n  }\n  ctx.lineTo(e.clientX, e.clientY - 60);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(e.clientX, e.clientY - 60);\n}\ncanvas.addEventListener('mousedown', startPosition);\ncanvas.addEventListener('mouseup', endPosition);\ncanvas.addEventListener('mousemove', draw);\n</script>"
        },
        {
          "question": "Create a canvas-based animation of particles (small circles) moving randomly.",
          "solution": "<canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #000000;\"></canvas>\n<script>\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\nvar particles = [];\nfunction Particle(x, y, dx, dy, radius, color) {\n  this.x = x;\n  this.y = y;\n  this.dx = dx;\n  this.dy = dy;\n  this.radius = radius;\n  this.color = color;\n  this.draw = function() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n  this.update = function() {\n    this.x += this.dx;\n    this.y += this.dy;\n    this.draw();\n  }\n}\nfunction init() {\n  for (var i = 0; i < 100; i++) {\n    var radius = Math.random() * 5 + 1;\n    var x = Math.random() * (canvas.width - radius * 2) + radius;\n    var y = Math.random() * (canvas.height - radius * 2) + radius;\n    var dx = (Math.random() - 0.5) * 2;\n    var dy = (Math.random() - 0.5) * 2;\n    var color = 'blue';\n    particles.push(new Particle(x, y, dx, dy, radius, color));\n  }\n}\nfunction animate() {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  for (var i = 0; i < particles.length; i++) {\n    particles[i].update();\n  }\n}\ninit();\nanimate();\n</script>"
        }
      ]
    },
    {
      "name": "Raspberry Pi",
      "problems": [
        {
          "question": "Write a Python script to blink an LED connected to GPIO pin 17.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\nLED_PIN = 17\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(LED_PIN, GPIO.OUT)\n\ntry:\n    while True:\n        GPIO.output(LED_PIN, GPIO.HIGH)\n        time.sleep(1)\n        GPIO.output(LED_PIN, GPIO.LOW)\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    GPIO.cleanup()\n"
        },
        {
          "question": "Create a Python program to read a temperature sensor (e.g., DS18B20) connected to Raspberry Pi.",
          "solution": "import os\nimport glob\nimport time\n\nos.system('modprobe w1-gpio')\nos.system('modprobe w1-therm')\n\nbase_dir = '/sys/bus/w1/devices/'\ndevice_folder = glob.glob(base_dir + '28*')[0]\ndevice_file = device_folder + '/w1_slave'\n\ndef read_temp_raw():\n    f = open(device_file, 'r')\n    lines = f.readlines()\n    f.close()\n    return lines\n\ndef read_temp():\n    lines = read_temp_raw()\n    while lines[0].strip()[-3:] != 'YES':\n        time.sleep(0.2)\n        lines = read_temp_raw()\n    equals_pos = lines[1].find('t=')\n    if equals_pos != -1:\n        temp_string = lines[1][equals_pos + 2:]\n        temp_c = float(temp_string) / 1000.0\n        return temp_c\n\nwhile True:\n    print('Temperature: {:.1f} C'.format(read_temp()))\n    time.sleep(1)\n"
        },
        {
          "question": "Write a Python script to control a servo motor using PWM on Raspberry Pi.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\nSERVO_PIN = 18\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SERVO_PIN, GPIO.OUT)\n\npwm = GPIO.PWM(SERVO_PIN, 50)\npwm.start(0)\n\ntry:\n    while True:\n        pwm.ChangeDutyCycle(7.5)  # Neutral position\n        time.sleep(1)\n        pwm.ChangeDutyCycle(12.5)  # 180 degree position\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    pwm.stop()\n    GPIO.cleanup()\n"
        },
        {
          "question": "Create a Python program to capture an image using the Raspberry Pi camera module.",
          "solution": "from picamera import PiCamera\nimport time\n\ncamera = PiCamera()\n\ntry:\n    camera.start_preview()\n    time.sleep(5)\n    camera.capture('/home/pi/image.jpg')\n    camera.stop_preview()\nfinally:\n    camera.close()\n"
        },
        {
          "question": "Write a Python script to log sensor data (e.g., temperature) to a file on Raspberry Pi.",
          "solution": "import os\nimport glob\nimport time\n\nos.system('modprobe w1-gpio')\nos.system('modprobe w1-therm')\n\nbase_dir = '/sys/bus/w1/devices/'\ndevice_folder = glob.glob(base_dir + '28*')[0]\ndevice_file = device_folder + '/w1_slave'\n\nlog_file = '/home/pi/sensor_log.txt'\n\ndef read_temp_raw():\n    f = open(device_file, 'r')\n    lines = f.readlines()\n    f.close()\n    return lines\n\ndef read_temp():\n    lines = read_temp_raw()\n    while lines[0].strip()[-3:] != 'YES':\n        time.sleep(0.2)\n        lines = read_temp_raw()\n    equals_pos = lines[1].find('t=')\n    if equals_pos != -1:\n        temp_string = lines[1][equals_pos + 2:]\n        temp_c = float(temp_string) / 1000.0\n        return temp_c\n\ntry:\n    while True:\n        temp = read_temp()\n        with open(log_file, 'a') as f:\n            f.write(f'Temperature: {temp} C - {time.strftime('%Y-%m-%d %H:%M:%S')}\n')\n        time.sleep(60)\nexcept KeyboardInterrupt:\n    pass\n"
        },
        {
          "question": "Create a Python script to control an RGB LED connected to Raspberry Pi.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\nRED_PIN = 17\nGREEN_PIN = 18\nBLUE_PIN = 27\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(RED_PIN, GPIO.OUT)\nGPIO.setup(GREEN_PIN, GPIO.OUT)\nGPIO.setup(BLUE_PIN, GPIO.OUT)\n\ndef set_color(red, green, blue):\n    GPIO.output(RED_PIN, red)\n    GPIO.output(GREEN_PIN, green)\n    GPIO.output(BLUE_PIN, blue)\n\ntry:\n    while True:\n        set_color(1, 0, 0)  # Red\n        time.sleep(1)\n        set_color(0, 1, 0)  # Green\n        time.sleep(1)\n        set_color(0, 0, 1)  # Blue\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    GPIO.cleanup()\n"
        },
        {
          "question": "Write a Python program to read data from an ultrasonic sensor and calculate distance on Raspberry Pi.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\nTRIG_PIN = 23\nECHO_PIN = 24\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(TRIG_PIN, GPIO.OUT)\nGPIO.setup(ECHO_PIN, GPIO.IN)\n\ntry:\n    while True:\n        GPIO.output(TRIG_PIN, False)\n        time.sleep(0.5)\n\n        GPIO.output(TRIG_PIN, True)\n        time.sleep(0.00001)\n        GPIO.output(TRIG_PIN, False)\n\n        while GPIO.input(ECHO_PIN) == 0:\n            pulse_start = time.time()\n\n        while GPIO.input(ECHO_PIN) == 1:\n            pulse_end = time.time()\n\n        pulse_duration = pulse_end - pulse_start\n        distance = pulse_duration * 17150\n        distance = round(distance, 2)\n\n        print(f'Distance: {distance} cm')\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    GPIO.cleanup()\n"
        },
        {
          "question": "Create a Python program to send an email notification from Raspberry Pi using smtplib.",
          "solution": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nSMTP_SERVER = 'smtp.gmail.com'\nSMTP_PORT = 587\nEMAIL = 'your_email@gmail.com'\nPASSWORD = 'your_password'\nRECEIVER_EMAIL = 'recipient_email@gmail.com'\n\nmessage = MIMEMultipart()\nmessage['From'] = EMAIL\nmessage['To'] = RECEIVER_EMAIL\nmessage['Subject'] = 'Raspberry Pi Notification'\n\nbody = 'This is a test email from Raspberry Pi'\nmessage.attach(MIMEText(body, 'plain'))\n\ntry:\n    server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    server.starttls()\n    server.login(EMAIL, PASSWORD)\n    text = message.as_string()\n    server.sendmail(EMAIL, RECEIVER_EMAIL, text)\n    print('Email sent successfully')\nexcept Exception as e:\n    print(f'Error sending email: {e}')\nfinally:\n    server.quit()\n"
        },
        {
          "question": "Write a Python script to play a sound file on Raspberry Pi using pygame.",
          "solution": "import pygame\n\npygame.mixer.init()\npygame.mixer.music.load('/home/pi/sound.mp3')\n\ntry:\n    pygame.mixer.music.play()\n    while pygame.mixer.music.get_busy():\n        pygame.time.Clock().tick(10)\nexcept KeyboardInterrupt:\n    pygame.mixer.music.stop()\n    pygame.mixer.quit()\n"
        },
        {
          "question": "Create a Python program to read data from a DHT11 or DHT22 sensor and display temperature and humidity on Raspberry Pi.",
          "solution": "import Adafruit_DHT\nimport time\n\nSENSOR = Adafruit_DHT.DHT11\nPIN = 4\n\ntry:\n    while True:\n        humidity, temperature = Adafruit_DHT.read_retry(SENSOR, PIN)\n        if humidity is not None and temperature is not None:\n            print(f'Temperature: {temperature:.1f} C, Humidity: {humidity:.1f} %')\n        else:\n            print('Failed to retrieve data from sensor')\n        time.sleep(2)\nexcept KeyboardInterrupt:\n    pass\n"
        },
        {
          "question": "Create a Python program to interface with a 16x2 LCD display using I2C on Raspberry Pi.",
          "solution": "import time\nimport Adafruit_CharLCD as LCD\n\n# Raspberry Pi pin configuration:\nlcd_rs        = 25  # Note this might need to be changed to 21 for older revision Pi's.\nlcd_en        = 24\nd4, d5, d6, d7 = 23, 17, 18, 22\nlcd_backlight = 2\n\n# Define LCD column and row size for 16x2 LCD.\nlcd_columns = 16\nlcd_rows    = 2\n\n# Initialize the LCD using the pins above.\nlcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, d4, d5, d6, d7,\n                           lcd_columns, lcd_rows, lcd_backlight)\n\ntry:\n    lcd.message('Hello, Raspberry\nPi!')\n    time.sleep(2)\n    lcd.clear()\n    lcd.message('LCD Display\nInterfacing')\n    time.sleep(2)\n    lcd.clear()\nfinally:\n    lcd.clear()\n"
        },
        {
          "question": "Write a Python program to control a DC motor using L293D motor driver with Raspberry Pi.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\n\n# Motor 1\nenable_pin = 17\ninput1_pin = 18\ninput2_pin = 27\n\nGPIO.setup(enable_pin, GPIO.OUT)\nGPIO.setup(input1_pin, GPIO.OUT)\nGPIO.setup(input2_pin, GPIO.OUT)\n\npwm = GPIO.PWM(enable_pin, 100)\npwm.start(0)\n\ndef motor_forward():\n    GPIO.output(input1_pin, GPIO.HIGH)\n    GPIO.output(input2_pin, GPIO.LOW)\n\ntry:\n    motor_forward()\n    pwm.ChangeDutyCycle(50)\n    time.sleep(2)\nexcept KeyboardInterrupt:\n    pwm.stop()\n    GPIO.cleanup()\n"
        },
        {
          "question": "Create a Python program to read data from an MPU-6050 accelerometer and gyroscope module using Raspberry Pi.",
          "solution": "import smbus\nimport math\nimport time\n\n# MPU-6050 Registers\nDEVICE_ADDRESS = 0x68\n\nPWR_MGMT_1 = 0x6B\nSMPLRT_DIV = 0x19\nCONFIG = 0x1A\nGYRO_CONFIG = 0x1B\nINT_ENABLE = 0x38\nACCEL_XOUT = 0x3B\nACCEL_YOUT = 0x3D\nACCEL_ZOUT = 0x3F\nGYRO_XOUT = 0x43\nGYRO_YOUT = 0x45\nGYRO_ZOUT = 0x47\n\nbus = smbus.SMBus(1)  # or 0 for older version Pi\n\ndef MPU_Init():\n    bus.write_byte_data(DEVICE_ADDRESS, SMPLRT_DIV, 7)\n    bus.write_byte_data(DEVICE_ADDRESS, PWR_MGMT_1, 1)\n    bus.write_byte_data(DEVICE_ADDRESS, CONFIG, 0)\n    bus.write_byte_data(DEVICE_ADDRESS, GYRO_CONFIG, 24)\n    bus.write_byte_data(DEVICE_ADDRESS, INT_ENABLE, 1)\n\ndef read_raw_data(addr):\n    high = bus.read_byte_data(DEVICE_ADDRESS, addr)\n    low = bus.read_byte_data(DEVICE_ADDRESS, addr + 1)\n    value = ((high << 8) | low)\n    if (value > 32768):\n        value = value - 65536\n    return value\n\nMPU_Init()\n\ntime.sleep(1)\n\ntry:\n    while True:\n        accel_x = read_raw_data(ACCEL_XOUT) / 16384.0\n        accel_y = read_raw_data(ACCEL_YOUT) / 16384.0\n        accel_z = read_raw_data(ACCEL_ZOUT) / 16384.0\n        gyro_x = read_raw_data(GYRO_XOUT) / 131.0\n        gyro_y = read_raw_data(GYRO_YOUT) / 131.0\n        gyro_z = read_raw_data(GYRO_ZOUT) / 131.0\n        print(f'Accel X: {accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} | Gyro X: {gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f}')\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    pass\n"
        },
        {
          "question": "Write a Python program to control a stepper motor using the ULN2003 driver board with Raspberry Pi.",
          "solution": "import RPi.GPIO as GPIO\nimport time\n\n# Define GPIO pins for ULN2003\nIN1 = 26\nIN2 = 19\nIN3 = 13\nIN4 = 6\n\n# Define sequence\nStepCount = 8\nSeq = list(range(0, StepCount))\nSeq[0] = [1, 0, 0, 0]\nSeq[1] = [1, 1, 0, 0]\nSeq[2] = [0, 1, 0, 0]\nSeq[3] = [0, 1, 1, 0]\nSeq[4] = [0, 0, 1, 0]\nSeq[5] = [0, 0, 1, 1]\nSeq[6] = [0, 0, 0, 1]\nSeq[7] = [1, 0, 0, 1]\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(IN1, GPIO.OUT)\nGPIO.setup(IN2, GPIO.OUT)\nGPIO.setup(IN3, GPIO.OUT)\nGPIO.setup(IN4, GPIO.OUT)\n\ndef setStep(w1, w2, w3, w4):\n    GPIO.output(IN1, w1)\n    GPIO.output(IN2, w2)\n    GPIO.output(IN3, w3)\n    GPIO.output(IN4, w4)\n\ntry:\n    while True:\n        for i in range(StepCount):\n            setStep(Seq[i][0], Seq[i][1], Seq[i][2], Seq[i][3])\n            time.sleep(0.01)\n        for i in range(StepCount - 1, -1, -1):\n            setStep(Seq[i][0], Seq[i][1], Seq[i][2], Seq[i][3])\n            time.sleep(0.01)\nexcept KeyboardInterrupt:\n    GPIO.cleanup()\n"
        },
        {
          "question": "Create a Python program to monitor and control GPIO pins using the Flask web framework on Raspberry Pi.",
          "solution": "from flask import Flask, render_template, request\nimport RPi.GPIO as GPIO\n\napp = Flask(__name__)\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(17, GPIO.OUT)\nGPIO.output(17, GPIO.LOW)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/on')\ndef on():\n    GPIO.output(17, GPIO.HIGH)\n    return 'LED is on'\n\n@app.route('/off')\ndef off():\n    GPIO.output(17, GPIO.LOW)\n    return 'LED is off'\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')\n"
        }
      ]
    },
    {
      "name": "CyberSecurity",
      "problems": [
        {
          "question": "Explain the concept of phishing attacks and how to prevent them.",
          "solution": "Phishing attacks involve fraudulent attempts to obtain sensitive information by disguising as a trustworthy entity. Prevention methods include user education, verifying URLs, and using spam filters."
        },
        {
          "question": "Describe the role of firewalls in network security.",
          "solution": "Firewalls act as a barrier between trusted internal networks and untrusted external networks, controlling incoming and outgoing network traffic based on predetermined security rules."
        },
        {
          "question": "Explain what a Denial of Service (DoS) attack is and how to mitigate it.",
          "solution": "A DoS attack aims to make a machine or network resource unavailable to its intended users by overwhelming it with a flood of illegitimate requests. Mitigation involves using firewalls, rate limiting, and DDoS protection services."
        },
        {
          "question": "Describe the importance of encryption in cybersecurity.",
          "solution": "Encryption ensures that data transmitted over networks or stored on devices remains secure and private by encoding it into ciphertext that can only be decrypted with the correct decryption key."
        },
        {
          "question": "Explain the concept of multi-factor authentication (MFA) and its benefits.",
          "solution": "MFA requires users to verify their identity using multiple credentials, typically something they know (password) and something they have (security token), enhancing security by adding an extra layer of protection."
        },
        {
          "question": "Describe different types of malware and their effects on computer systems.",
          "solution": "Malware includes viruses, worms, Trojans, ransomware, and spyware, each designed to disrupt, damage, or gain unauthorized access to computer systems, steal data, or extort money."
        },
        {
          "question": "Explain what social engineering is and how it can be prevented.",
          "solution": "Social engineering involves manipulating individuals to disclose sensitive information or perform actions unwittingly. Prevention includes awareness training, verifying identities, and implementing strict access controls."
        },
        {
          "question": "Describe the concept of vulnerability assessment and its role in cybersecurity.",
          "solution": "Vulnerability assessment identifies and quantifies vulnerabilities in computer systems, networks, or applications, helping organizations prioritize and mitigate risks before they can be exploited."
        },
        {
          "question": "Explain the difference between penetration testing and vulnerability assessment.",
          "solution": "Penetration testing involves simulating attacks to identify and exploit vulnerabilities in systems, networks, or applications, whereas vulnerability assessment focuses on identifying and prioritizing vulnerabilities without exploiting them."
        },
        {
          "question": "Describe the importance of regular software updates in cybersecurity.",
          "solution": "Regular software updates (patches) help fix known vulnerabilities and weaknesses in software, reducing the risk of exploitation by attackers and enhancing overall system security."
        },
        {
          "question": "Explain the concept of zero-day vulnerability and how it can be mitigated.",
          "solution": "A zero-day vulnerability is a software flaw that is unknown to the vendor and remains unpatched, posing a high risk of exploitation. Mitigation involves proactive monitoring, threat intelligence, and rapid patching."
        },
        {
          "question": "Describe the principles of least privilege and how they enhance cybersecurity.",
          "solution": "Least privilege restricts user access rights to only those necessary for their legitimate tasks, reducing the potential impact of compromised accounts or insider threats on system security."
        },
        {
          "question": "Explain what a Man-in-the-Middle (MitM) attack is and how to prevent it.",
          "solution": "A MitM attack intercepts and potentially alters communication between two parties without their knowledge. Prevention methods include encryption, using secure channels, and verifying identities."
        },
        {
          "question": "Describe the role of Intrusion Detection Systems (IDS) in cybersecurity.",
          "solution": "IDS monitor network traffic for suspicious activity or violations of security policies, alerting administrators to potential threats or attacks in real-time, enabling rapid response and mitigation."
        },
        {
          "question": "Explain the concept of network segmentation and its benefits in cybersecurity.",
          "solution": "Network segmentation divides a network into smaller, isolated segments, reducing the attack surface and limiting the spread of threats, enhancing overall network security and management."
        },
        {
          "question": "Describe the concept of ransomware and strategies for preventing ransomware attacks.",
          "solution": "Ransomware encrypts files or locks systems, demanding payment (usually in cryptocurrency) for decryption or restoration. Prevention involves regular backups, security patches, and user education."
        },
        {
          "question": "Explain the concept of a digital certificate and its role in cybersecurity.",
          "solution": "A digital certificate is an electronic document used to verify the authenticity and identity of a person, organization, or device. It ensures secure communication and data integrity in online transactions."
        },
        {
          "question": "Describe the principles of cryptography and their applications in cybersecurity.",
          "solution": "Cryptography uses algorithms to encrypt and decrypt data, ensuring confidentiality, integrity, and authenticity in secure communication, digital signatures, and data storage."
        },
        {
          "question": "Explain what a SQL injection attack is and how to prevent it.",
          "solution": "A SQL injection attack exploits vulnerabilities in web applications by inserting malicious SQL code into input fields, enabling attackers to manipulate databases and steal or modify data. Prevention involves using parameterized queries and input validation."
        },
        {
          "question": "Describe the role of Security Information and Event Management (SIEM) systems in cybersecurity.",
          "solution": "SIEM systems collect, analyze, and correlate security event data from multiple sources across an organization's IT infrastructure, providing real-time visibility into potential threats and enabling efficient incident response."
        }
      ]
    },
    {
      "name": "Git",
      "problems": [
        {
          "question": "Initialize a new Git repository.",
          "solution": "# Initialize an empty Git repository\n$ git init"
        },
        {
          "question": "Add a file to the staging area.",
          "solution": "# Add a file to the staging area\n$ git add filename.ext"
        },
        {
          "question": "Commit changes to the repository with a message.",
          "solution": "# Commit changes with a message\n$ git commit -m \"Commit message\""
        },
        {
          "question": "Check the status of the repository.",
          "solution": "# Check repository status\n$ git status"
        },
        {
          "question": "View the commit history of the repository.",
          "solution": "# View commit history\n$ git log"
        },
        {
          "question": "Create a new branch in the repository.",
          "solution": "# Create a new branch\n$ git branch branchname"
        },
        {
          "question": "Switch to a different branch.",
          "solution": "# Switch to a branch\n$ git checkout branchname"
        },
        {
          "question": "Merge changes from one branch into another.",
          "solution": "# Merge branches\n$ git merge branchname"
        },
        {
          "question": "Undo the last commit keeping changes in the working directory.",
          "solution": "# Undo last commit, keep changes\n$ git reset HEAD^"
        },
        {
          "question": "Discard changes in the working directory for a specific file.",
          "solution": "# Discard changes for a file\n$ git checkout -- filename.ext"
        },
        {
          "question": "View differences between the working directory and the staging area.",
          "solution": "# View differences\n$ git diff"
        },
        {
          "question": "Push changes to a remote repository.",
          "solution": "# Push changes to remote\n$ git push origin branchname"
        },
        {
          "question": "Pull changes from a remote repository.",
          "solution": "# Pull changes from remote\n$ git pull origin branchname"
        },
        {
          "question": "Create and apply a Git patch.",
          "solution": "# Create a patch file\n$ git diff > patchfile.patch\n\n# Apply a patch file\n$ git apply patchfile.patch"
        },
        {
          "question": "Remove a file from the Git repository.",
          "solution": "# Remove a file from Git\n$ git rm filename.ext"
        },
        {
          "question": "Configure Git username and email.",
          "solution": "# Configure username and email\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"your.email@example.com\""
        },
        {
          "question": "Create a tag for a specific commit.",
          "solution": "# Create a tag\n$ git tag tagname"
        },
        {
          "question": "View tags in the repository.",
          "solution": "# View tags\n$ git tag"
        },
        {
          "question": "Stash changes temporarily.",
          "solution": "# Stash changes\n$ git stash"
        },
        {
          "question": "Apply stashed changes to the working directory.",
          "solution": "# Apply stashed changes\n$ git stash apply"
        }
      ]
    },
    {
      "name": "MatlabPilot",
      "problems": [
        {
          "question": "Write a MATLAB script to calculate the sum of two numbers.",
          "solution": "% Calculate the sum of two numbers\na = 5;\nb = 10;\nsum = a + b;\ndisp(['Sum of ' num2str(a) ' and ' num2str(b) ' is: ' num2str(sum)])"
        },
        {
          "question": "Write a MATLAB script to plot a sine wave.",
          "solution": "% Plotting a sine wave\nx = linspace(0, 2*pi, 100);\ny = sin(x);\nplot(x, y);\ntitle('Sine Wave');\nxlabel('Angle (radians)');\nylabel('sin(x)');\ngrid on;"
        },
        {
          "question": "Create a MATLAB script to find the roots of a quadratic equation.",
          "solution": "% Finding roots of a quadratic equation\na = 1;\nb = -3;\nc = 2;\n\n% Calculate roots\nroots = roots([a b c]);\n\n% Display roots\nif isreal(roots)\n    disp(['Roots are: ' num2str(roots)]);\nelse\n    disp('Roots are complex');\nend"
        },
        {
          "question": "Write a MATLAB script to generate a random matrix and find its transpose.",
          "solution": "% Generating a random matrix and finding its transpose\nmatrix = randi([1, 10], 3, 3);\ntransposeMatrix = matrix.';\n\n% Display matrices\ndisp('Original Matrix:');\ndisp(matrix);\ndisp('Transpose Matrix:');\ndisp(transposeMatrix);"
        },
        {
          "question": "Create a MATLAB script to solve a system of linear equations.",
          "solution": "% Solving a system of linear equations\nA = [2, 3; 4, 5];\nB = [5; 7];\n\n% Solve for X\nX = A \\ B;\n\n% Display solution\ndisp(['Solution X: ' num2str(X.')]);"
        },
        {
          "question": "Write a MATLAB script to perform matrix multiplication.",
          "solution": "% Performing matrix multiplication\nA = [1, 2; 3, 4];\nB = [5, 6; 7, 8];\n\n% Multiply matrices\nC = A * B;\n\n% Display result\ndisp('Result of matrix multiplication:');\ndisp(C);"
        },
        {
          "question": "Create a MATLAB script to find the area of a circle given its radius.",
          "solution": "% Finding the area of a circle\nradius = 5;\narea = pi * radius^2;\ndisp(['Area of circle with radius ' num2str(radius) ' is: ' num2str(area)]);"
        },
        {
          "question": "Write a MATLAB script to compute the FFT (Fast Fourier Transform) of a signal.",
          "solution": "% Computing FFT of a signal\nsignal = [1, 2, 3, 4];\nfftSignal = fft(signal);\n\n% Display FFT\ndisp('FFT of signal:');\ndisp(fftSignal);"
        },
        {
          "question": "Create a MATLAB script to generate a 3D plot of a function.",
          "solution": "% Generating a 3D plot\n[X, Y] = meshgrid(-2:0.1:2);\nZ = X.^2 + Y.^2;\n\n% Plotting\nfigure;\nsurf(X, Y, Z);\ntitle('3D Plot of X^2 + Y^2');\nxlabel('X');\nylabel('Y');\nzlabel('Z');\ngrid on;"
        },
        {
          "question": "Write a MATLAB script to calculate the inverse of a matrix.",
          "solution": "% Calculating the inverse of a matrix\nA = [2, 3; 4, 5];\n\n% Calculate inverse\ninverseA = inv(A);\n\n% Display inverse\nif ~isnan(inverseA)\n    disp('Inverse of matrix A:');\n    disp(inverseA);\nelse\n    disp('Inverse does not exist for matrix A');\nend"
        },
        {
          "question": "Create a MATLAB script to generate a bar chart.",
          "solution": "% Generating a bar chart\nx = [1, 2, 3, 4];\ny = [10, 15, 7, 22];\nbar(x, y);\ntitle('Bar Chart');\nxlabel('X-axis');\nylabel('Y-axis');\ngrid on;"
        },
        {
          "question": "Write a MATLAB script to perform image processing (e.g., grayscale conversion, edge detection).",
          "solution": "% Performing grayscale conversion and edge detection\nimg = imread('image.jpg');\ngrayscaleImg = rgb2gray(img);\nedgeImg = edge(grayscaleImg, 'canny');\n\n% Display original and processed images\nfigure;\nsubplot(1, 2, 1);\nimshow(img);\ntitle('Original Image');\nsubplot(1, 2, 2);\nimshow(edgeImg);\ntitle('Edge Detected Image');"
        },
        {
          "question": "Write a MATLAB script to solve a system of nonlinear equations.",
          "solution": "% Solving a system of nonlinear equations\nfun = @(x) [x(1)^2 + x(2)^2 - 4; x(1) * x(2) - 1];\nx0 = [1; 1];\noptions = optimset('Display', 'iter');\nx = fsolve(fun, x0, options);\n\n% Display solution\nif ~isempty(x)\n    disp(['Solution: x1 = ' num2str(x(1)) ', x2 = ' num2str(x(2))]);\nelse\n    disp('No solution found');\nend"
        },
        {
          "question": "Create a MATLAB script to perform basic statistics on a dataset.",
          "solution": "% Performing basic statistics on a dataset\ndata = [10, 20, 15, 25, 30];\nmeanValue = mean(data);\nmedianValue = median(data);\nstdDeviation = std(data);\n\n% Display statistics\nfprintf('Mean: %.2f\\nMedian: %.2f\\nStandard Deviation: %.2f\\n', meanValue, medianValue, stdDeviation);"
        },
        {
          "question": "Write a MATLAB script to perform matrix decomposition (e.g., LU decomposition).",
          "solution": "% Performing LU decomposition\nA = [4, 3; 6, 3];\n\n% Perform LU decomposition\n[L, U] = lu(A);\n\n% Display matrices\nfprintf('Matrix A:\\n');\ndisp(A);\nfprintf('Lower Triangular Matrix L:\\n');\ndisp(L);\nfprintf('Upper Triangular Matrix U:\\n');\ndisp(U);"
        },
        {
          "question": "Create a MATLAB script to implement a simple neural network (e.g., perceptron).",
          "solution": "% Implementing a simple neural network (perceptron)\ninputs = [0, 1, 1; 1, 0, 1];\nweights = [0.5; -0.5; 1];\nbias = 0.2;\n\n% Calculate output\noutput = heaviside(weights.' * inputs + bias);\n\n% Display output\nfprintf('Output of perceptron: %.2f, %.2f, %.2f\\n', output);"
        },
        {
          "question": "Write a MATLAB script to perform interpolation on a dataset.",
          "solution": "% Performing interpolation on a dataset\nx = [1, 2, 3, 4];\ny = [10, 15, 7, 22];\nxi = 1.5;\nmethod = 'linear';\n\n% Perform interpolation\nyi = interp1(x, y, xi, method);\n\n% Display interpolated value\nfprintf('Interpolated value at x=%.1f using %s interpolation: %.2f\\n', xi, method, yi);"
        }
      ]
    },
    {
      "name": "NumPy",
      "problems": [
        {
          "question": "Create a NumPy array with values from 0 to 9.",
          "solution": "import numpy as np\n\narr = np.arange(10)\nprint(arr)"
        },
        {
          "question": "Generate a 3x3 matrix with values ranging from 0 to 8.",
          "solution": "import numpy as np\n\narr = np.arange(9).reshape(3, 3)\nprint(arr)"
        },
        {
          "question": "Create a 2x2 identity matrix.",
          "solution": "import numpy as np\n\narr = np.eye(2)\nprint(arr)"
        },
        {
          "question": "Convert a list to a NumPy array.",
          "solution": "import numpy as np\n\nlst = [1, 2, 3]\narr = np.array(lst)\nprint(arr)"
        },
        {
          "question": "Create a NumPy array of zeros with 5 elements.",
          "solution": "import numpy as np\n\narr = np.zeros(5)\nprint(arr)"
        },
        {
          "question": "Create a NumPy array of ones with shape (3, 3).",
          "solution": "import numpy as np\n\narr = np.ones((3, 3))\nprint(arr)"
        },
        {
          "question": "Create a NumPy array of random integers between 1 and 10 with shape (2, 3).",
          "solution": "import numpy as np\n\narr = np.random.randint(1, 11, (2, 3))\nprint(arr)"
        },
        {
          "question": "Reshape a NumPy array of shape (6,) to (3, 2).",
          "solution": "import numpy as np\n\narr = np.arange(6)\nreshaped_arr = arr.reshape(3, 2)\nprint(reshaped_arr)"
        },
        {
          "question": "Transpose a NumPy array of shape (2, 3) to (3, 2).",
          "solution": "import numpy as np\n\narr = np.arange(6).reshape(2, 3)\ntransposed_arr = arr.T\nprint(transposed_arr)"
        },
        {
          "question": "Perform element-wise addition of two NumPy arrays [1, 2, 3] and [4, 5, 6].",
          "solution": "import numpy as np\n\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nresult = arr1 + arr2\nprint(result)"
        },
        {
          "question": "Find the dot product of two NumPy arrays [1, 2] and [3, 4].",
          "solution": "import numpy as np\n\narr1 = np.array([1, 2])\narr2 = np.array([3, 4])\ndot_product = np.dot(arr1, arr2)\nprint(dot_product)"
        },
        {
          "question": "Calculate the mean of elements in a NumPy array [1, 2, 3, 4, 5].",
          "solution": "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nmean = np.mean(arr)\nprint(mean)"
        },
        {
          "question": "Find the index of the maximum value in a NumPy array [3, 1, 8, 5, 4].",
          "solution": "import numpy as np\n\narr = np.array([3, 1, 8, 5, 4])\nmax_index = np.argmax(arr)\nprint(max_index)"
        },
        {
          "question": "Create a NumPy array with numbers spaced evenly between 0 and 10, with 5 elements.",
          "solution": "import numpy as np\n\narr = np.linspace(0, 10, 5)\nprint(arr)"
        },
        {
          "question": "Calculate the standard deviation of elements in a NumPy array [1, 2, 3, 4, 5].",
          "solution": "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nstd_dev = np.std(arr)\nprint(std_dev)"
        },
        {
          "question": "Sort elements of a NumPy array [3, 1, 4, 2, 5].",
          "solution": "import numpy as np\n\narr = np.array([3, 1, 4, 2, 5])\nsorted_arr = np.sort(arr)\nprint(sorted_arr)"
        },
        {
          "question": "Find unique elements in a NumPy array [1, 2, 1, 3, 4, 2, 5].",
          "solution": "import numpy as np\n\narr = np.array([1, 2, 1, 3, 4, 2, 5])\nunique_elements = np.unique(arr)\nprint(unique_elements)"
        },
        {
          "question": "Create a NumPy array with values from 0 to 9, excluding 5.",
          "solution": "import numpy as np\n\narr = np.arange(10)\narr_without_5 = np.delete(arr, 5)\nprint(arr_without_5)"
        },
        {
          "question": "Find the inverse of a 2x2 matrix [[1, 2], [3, 4]].",
          "solution": "import numpy as np\n\nmatrix = np.array([[1, 2], [3, 4]])\ninv_matrix = np.linalg.inv(matrix)\nprint(inv_matrix)"
        },
        {
          "question": "Calculate the cross product of two NumPy arrays [1, 2, 3] and [4, 5, 6].",
          "solution": "import numpy as np\n\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\ncross_product = np.cross(arr1, arr2)\nprint(cross_product)"
        }
      ]
    },
    {
      "name": "Pandas",
      "problems": [
        {
          "question": "Create a Pandas DataFrame from a dictionary of lists.",
          "solution": "import pandas as pd\n\n# Sample data\ndata = {'Name': ['John', 'Anna', 'Peter'],\n        'Age': [28, 23, 32],\n        'City': ['New York', 'Paris', 'London']}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\nprint(df)"
        },
        {
          "question": "Select the first 5 rows of a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame\nfirst_five_rows = df.head()\nprint(first_five_rows)"
        },
        {
          "question": "Find the number of rows and columns in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame\nnum_rows, num_cols = df.shape\nprint(f'Number of rows: {num_rows}, Number of columns: {num_cols}')"
        },
        {
          "question": "Calculate the mean and median of a numerical column in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and 'Age' is the column\nmean_age = df['Age'].mean()\nmedian_age = df['Age'].median()\nprint(f'Mean Age: {mean_age}, Median Age: {median_age}')"
        },
        {
          "question": "Filter rows in a DataFrame based on a condition (e.g., age > 30).",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame\nfiltered_df = df[df['Age'] > 30]\nprint(filtered_df)"
        },
        {
          "question": "Sort a DataFrame based on a column in ascending order.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to sort by 'Age'\nsorted_df = df.sort_values(by='Age')\nprint(sorted_df)"
        },
        {
          "question": "Group rows in a DataFrame by a categorical column and calculate the mean of another column.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame\nmean_age_by_city = df.groupby('City')['Age'].mean()\nprint(mean_age_by_city)"
        },
        {
          "question": "Merge two DataFrames based on a common column.",
          "solution": "import pandas as pd\n\n# Assuming df1 and df2 are your DataFrames, and you want to merge on 'ID'\nmerged_df = pd.merge(df1, df2, on='ID')\nprint(merged_df)"
        },
        {
          "question": "Create a new column in a DataFrame based on existing columns (e.g., calculate BMI from height and weight).",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to calculate BMI\n# BMI = weight (kg) / (height (m) ^ 2)\ndf['BMI'] = df['Weight'] / (df['Height'] / 100) ** 2\nprint(df)"
        },
        {
          "question": "Handle missing values (NaN) in a DataFrame by filling with a specific value or method.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to fill NaN values with 0\ndf_filled = df.fillna(0)\nprint(df_filled)"
        },
        {
          "question": "Select rows and columns from a DataFrame using loc and iloc.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to select rows 0 to 5 and columns 'Name' and 'Age'\nselected_data = df.loc[0:5, ['Name', 'Age']]\nprint(selected_data)"
        },
        {
          "question": "Calculate the correlation matrix of numerical columns in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame\ncorrelation_matrix = df.corr()\nprint(correlation_matrix)"
        },
        {
          "question": "Reshape a DataFrame from wide to long format using melt.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to melt based on 'Name'\nmelted_df = pd.melt(df, id_vars=['Name'], var_name='Variable', value_name='Value')\nprint(melted_df)"
        },
        {
          "question": "Create a pivot table from a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to create a pivot table\npivot_table = df.pivot_table(index='Name', columns='City', values='Age', aggfunc='mean')\nprint(pivot_table)"
        },
        {
          "question": "Read data from a CSV file into a Pandas DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming 'data.csv' is your CSV file\nfile_path = 'data.csv'\ndf = pd.read_csv(file_path)\nprint(df)"
        },
        {
          "question": "Write data from a Pandas DataFrame to a CSV file.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to write to 'output.csv'\noutput_file = 'output.csv'\ndf.to_csv(output_file, index=False)"
        },
        {
          "question": "Rename columns in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to rename 'OldName' to 'NewName'\ndf.rename(columns={'OldName': 'NewName'}, inplace=True)\nprint(df)"
        },
        {
          "question": "Drop rows or columns from a DataFrame based on a condition or labels.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to drop rows where 'Age' > 30\ndf_filtered = df[df['Age'] <= 30]\nprint(df_filtered)"
        },
        {
          "question": "Apply a function to each element in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to apply a function to each element\n# Example: Double each value in 'Age'\ndf['Age'] = df['Age'].apply(lambda x: x * 2)\nprint(df)"
        },
        {
          "question": "Calculate the cumulative sum of a column in a DataFrame.",
          "solution": "import pandas as pd\n\n# Assuming df is your DataFrame and you want to calculate the cumulative sum of 'Sales'\ndf['Cumulative_Sales'] = df['Sales'].cumsum()\nprint(df)"
        },
        {
          "question": "Normalize a numerical column in a DataFrame.",
          "solution": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Assuming df is your DataFrame and you want to normalize 'Age'\nscaler = MinMaxScaler()\ndf['Normalized_Age'] = scaler.fit_transform(df[['Age']])\nprint(df)"
        }
      ]
    },
    {
      "name": "SciPy",
      "problems": [
        {
          "question": "Write a Python program to calculate the determinant of a 3x3 matrix using SciPy.",
          "solution": "import numpy as np\nfrom scipy.linalg import det\n\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndeterminant = det(matrix)\nprint('Determinant of the matrix:')\nprint(determinant)"
        },
        {
          "question": "Create a program to find the eigenvalues and eigenvectors of a square matrix using SciPy.",
          "solution": "import numpy as np\nfrom scipy.linalg import eig\n\nmatrix = np.array([[1, 2], [2, 3]])\neigenvalues, eigenvectors = eig(matrix)\nprint('Eigenvalues:')\nprint(eigenvalues)\nprint('Eigenvectors:')\nprint(eigenvectors)"
        },
        {
          "question": "Write a Python program to perform linear regression using SciPy for a given set of data points.",
          "solution": "import numpy as np\nfrom scipy.stats import linregress\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([3, 5, 7, 9, 11])\nslope, intercept, r_value, p_value, std_err = linregress(x, y)\nprint('Slope and intercept of the regression line:')\nprint('Slope:', slope)\nprint('Intercept:', intercept)"
        },
        {
          "question": "Create a program to calculate the Fourier Transform of a given signal using SciPy.",
          "solution": "import numpy as np\nfrom scipy.fft import fft\n\nsignal = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nfourier_transform = fft(signal)\nprint('Fourier Transform of the signal:')\nprint(fourier_transform)"
        },
        {
          "question": "Write a Python program to solve a system of linear equations using SciPy.",
          "solution": "import numpy as np\nfrom scipy.linalg import solve\n\ncoefficients = np.array([[3, 1], [1, 2]])\nconstants = np.array([9, 8])\nsolution = solve(coefficients, constants)\nprint('Solution of the system of equations:')\nprint(solution)"
        },
        {
          "question": "Create a program to perform interpolation on a set of data points using SciPy.",
          "solution": "import numpy as np\nfrom scipy.interpolate import interp1d\n\nx = np.array([0, 1, 2, 3, 4])\ny = np.array([0, 2, 4, 6, 8])\nlinear_interp = interp1d(x, y, kind='linear')\nprint('Interpolated values at x=2.5:')\nprint(linear_interp(2.5))"
        },
        {
          "question": "Write a Python program to calculate the inverse of a matrix using SciPy.",
          "solution": "import numpy as np\nfrom scipy.linalg import inv\n\nmatrix = np.array([[1, 2], [3, 4]])\ninverse_matrix = inv(matrix)\nprint('Inverse of the matrix:')\nprint(inverse_matrix)"
        },
        {
          "question": "Create a program to perform numerical integration of a function using SciPy.",
          "solution": "import numpy as np\nfrom scipy.integrate import quad\n\ndef integrand(x):\n    return x ** 2\n\nresult, error = quad(integrand, 0, 1)\nprint('Numerical integration result:')\nprint(result)"
        },
        {
          "question": "Write a Python program to calculate the roots of a polynomial using SciPy.",
          "solution": "import numpy as np\nfrom scipy import roots\n\npolynomial_coefficients = np.array([1, -2, 1])\nroots = roots(polynomial_coefficients)\nprint('Roots of the polynomial:')\nprint(roots)"
        },
        {
          "question": "Create a program to perform clustering analysis on a dataset using SciPy.",
          "solution": "import numpy as np\nfrom scipy.cluster.vq import kmeans, vq\n\ndata = np.array([[1, 2], [2, 3], [5, 6], [6, 7], [10, 11], [11, 12]])\nclusters, distortion = kmeans(data, 2)\nprint('Cluster centroids:')\nprint(clusters)"
        },
        {
          "question": "Write a Python program to calculate the cumulative distribution function (CDF) of a random variable using SciPy.",
          "solution": "from scipy.stats import norm\n\ndef cdf_of_normal_distribution(x):\n    return norm.cdf(x)\n\nx_value = 1.5\ncdf_value = cdf_of_normal_distribution(x_value)\nprint('CDF of the normal distribution at x=1.5:')\nprint(cdf_value)"
        },
        {
          "question": "Create a program to perform sparse matrix operations using SciPy.",
          "solution": "import numpy as np\nfrom scipy.sparse import csr_matrix\n\nmatrix = np.array([[1, 0, 0], [0, 0, 2], [3, 0, 0]])\nsparse_matrix = csr_matrix(matrix)\nprint('Sparse matrix representation:')\nprint(sparse_matrix)"
        },
        {
          "question": "Write a Python program to calculate the cumulative sum of elements in an array using SciPy.",
          "solution": "import numpy as np\nfrom scipy import cumsum\n\narray = np.array([1, 2, 3, 4, 5])\ncumulative_sum = cumsum(array)\nprint('Cumulative sum of the array:')\nprint(cumulative_sum)"
        },
        {
          "question": "Create a program to perform principal component analysis (PCA) on a dataset using SciPy.",
          "solution": "import numpy as np\nfrom scipy import linalg\nfrom scipy.stats import zscore\n\ndata = np.array([[1, 2], [3, 4], [5, 6]])\ndata_normalized = zscore(data, axis=0)\nU, S, Vh = linalg.svd(data_normalized)\nprint('Principal components (Vh matrix):')\nprint(Vh)"
        },
        {
          "question": "Write a Python program to find the B-spline representation of a given curve using SciPy.",
          "solution": "import numpy as np\nfrom scipy.interpolate import splev, splrep\n\nx = np.array([0, 1, 2, 3, 4, 5])\ny = np.array([0, 2, 4, 6, 8, 10])\nknots, coeffs, degree = splrep(x, y)\nprint('B-spline representation (knots and coefficients):')\nprint('Knots:', knots)\nprint('Coefficients:', coeffs)"
        },
        {
          "question": "Create a program to perform curve fitting on a dataset using SciPy.",
          "solution": "import numpy as np\nfrom scipy.optimize import curve_fit\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([3, 5, 7, 9, 11])\ndef linear_function(x, m, c):\n    return m * x + c\nparams, covariance = curve_fit(linear_function, x, y)\nprint('Parameters of the linear fit (m and c):')\nprint('Slope (m):', params[0])\nprint('Intercept (c):', params[1])"
        },
        {
          "question": "Write a Python program to perform signal processing operations using SciPy.",
          "solution": "import numpy as np\nfrom scipy import signal\n\nsignal_values = np.array([0, 1, 2, 3, 4, 5])\nconvolution_kernel = np.array([1, 2, 1])\nconvolution_result = signal.convolve(signal_values, convolution_kernel, mode='same')\nprint('Convolution result using a kernel:')\nprint(convolution_result)"
        },
        {
          "question": "Create a program to calculate the distance between two points using SciPy.",
          "solution": "import numpy as np\nfrom scipy.spatial.distance import euclidean\n\npoint1 = np.array([1, 2, 3])\npoint2 = np.array([4, 5, 6])\ndistance = euclidean(point1, point2)\nprint('Euclidean distance between two points:')\nprint(distance)"
        }
      ]
    },
    {
      "name": "ASP",
      "problems": [
        {
          "question": "Create a basic ASP page that displays 'Hello, World!'",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nResponse.Write \"Hello, World!\"\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to display the current date and time.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nResponse.Write \"Current date and time: \" & Now()\n%>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page that accepts user input and displays it.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<form method=\"post\">\n  Enter your name: <input type=\"text\" name=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n<%\nIf Request.ServerVariables(\"REQUEST_METHOD\") = \"POST\" Then\n  Dim userName\n  userName = Request.Form(\"name\")\n  Response.Write \"Hello, \" & userName & \"!\"\nEnd If\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to calculate the factorial of a number.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nFunction factorial(n)\n  If n = 0 Then\n    factorial = 1\n  Else\n    factorial = n * factorial(n - 1)\n  End If\nEnd Function\nDim num, result\nnum = CInt(Request.QueryString(\"number\"))\nresult = factorial(num)\nResponse.Write \"Factorial of \" & num & \" is \" & result\n%>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP script to validate a form with required fields.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<form method=\"post\">\n  Enter your name: <input type=\"text\" name=\"name\"><br>\n  Enter your email: <input type=\"email\" name=\"email\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n<%\nIf Request.ServerVariables(\"REQUEST_METHOD\") = \"POST\" Then\n  Dim userName, userEmail\n  userName = Request.Form(\"name\")\n  userEmail = Request.Form(\"email\")\n  If userName = \"\" Or userEmail = \"\" Then\n    Response.Write \"Please fill in all fields\"\n  Else\n    Response.Write \"Form submitted successfully\"\n  End If\nEnd If\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to display all files in a directory.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim fso, folder, files, file\nSet fso = Server.CreateObject(\"Scripting.FileSystemObject\")\nSet folder = fso.GetFolder(Server.MapPath(\".\"))\nSet files = folder.Files\nFor Each file in files\n  Response.Write file.Name & \"<br>\"\nNext\nSet fso = Nothing\nSet folder = Nothing\nSet files = Nothing\n%>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page to read and display content from a text file.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim fso, file, text\nSet fso = Server.CreateObject(\"Scripting.FileSystemObject\")\nSet file = fso.OpenTextFile(Server.MapPath(\"data.txt\"), 1)\ntext = file.ReadAll\nfile.Close\nResponse.Write text\nSet fso = Nothing\nSet file = Nothing\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to handle sessions to count the number of visits to a page.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim count\nIf Session(\"visits\") = \"\" Then\n  Session(\"visits\") = 1\nElse\n  count = CInt(Session(\"visits\"))\n  count = count + 1\n  Session(\"visits\") = count\nEnd If\nResponse.Write \"Number of visits: \" & Session(\"visits\")\n%>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page that generates a random number between 1 and 100 on each refresh.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nRandomize\nDim randomNumber\nrandomNumber = Int((100 - 1 + 1) * Rnd + 1)\nResponse.Write \"Random number: \" & randomNumber\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to display an image with alternate text.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<img src=\"image.jpg\" alt=\"Example Image\">\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page to demonstrate session timeout handling.",
          "solution": "<%@ Language=VBScript %>\n<%\nIf Session(\"start\") = \"\" Then\n  Session.Timeout = 1 ' session timeout in minutes\n  Session(\"start\") = Now()\n  Response.Write \"Session started\"\nElse\n  Dim startTime\n  startTime = CDate(Session(\"start\"))\n  Dim currentTime\n  currentTime = Now()\n  Dim elapsedMinutes\n  elapsedMinutes = DateDiff(\"n\", startTime, currentTime)\n  If elapsedMinutes >= Session.Timeout Then\n    Response.Write \"Session expired\"\n  Else\n    Response.Write \"Session active\"\n  End If\nEnd If\n%>"
        },
        {
          "question": "Write an ASP script to handle errors and display a custom error message.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nOn Error Resume Next\nDim num1, num2, result\nnum1 = Request.Form(\"num1\")\nnum2 = Request.Form(\"num2\")\nresult = num1 / num2\nIf Err.Number <> 0 Then\n  Response.Write \"Error: Division by zero\"\n  Err.Clear\nElse\n  Response.Write \"Result: \" & result\nEnd If\n%>\n<form method=\"post\">\n  Enter number 1: <input type=\"text\" name=\"num1\"><br>\n  Enter number 2: <input type=\"text\" name=\"num2\"><br>\n  <input type=\"submit\" value=\"Calculate\">\n</form>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP script to upload a file and save it on the server.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim objFSO, objFile, strFile, strDirectory\nstrDirectory = Server.MapPath(\".\") & \"\\uploads\\\"\nSet objFSO = Server.CreateObject(\"Scripting.FileSystemObject\")\nIf Not objFSO.FolderExists(strDirectory) Then\n  objFSO.CreateFolder(strDirectory)\nEnd If\nSet objFile = objFSO.GetFile(Request.Files(\"file\").Item)\nstrFile = objFile.Name\nIf strFile <> \"\" Then\n  Request.Files(\"file\").SaveAs strDirectory & strFile\n  Response.Write \"File uploaded successfully: \" & strFile\nElse\n  Response.Write \"No file selected\"\nEnd If\nSet objFile = Nothing\nSet objFSO = Nothing\n%>\n<form method=\"post\" enctype=\"multipart/form-data\">\n  Select file to upload: <input type=\"file\" name=\"file\"><br>\n  <input type=\"submit\" value=\"Upload File\">\n</form>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to create a simple login form with authentication.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nIf Request.ServerVariables(\"REQUEST_METHOD\") = \"POST\" Then\n  Dim username, password\n  username = Request.Form(\"username\")\n  password = Request.Form(\"password\")\n  If username = \"admin\" And password = \"password\" Then\n    Response.Write \"Login successful\"\n  Else\n    Response.Write \"Invalid username or password\"\n  End If\nEnd If\n%>\n<form method=\"post\">\n  Username: <input type=\"text\" name=\"username\"><br>\n  Password: <input type=\"password\" name=\"password\"><br>\n  <input type=\"submit\" value=\"Login\">\n</form>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to create a simple shopping cart.",
          "solution": "<%@ Language=VBScript %>\n<%\nIf Request.ServerVariables(\"REQUEST_METHOD\") = \"POST\" Then\n  Dim item, price, quantity\n  item = Request.Form(\"item\")\n  price = Request.Form(\"price\")\n  quantity = Request.Form(\"quantity\")\n  If item <> \"\" And IsNumeric(price) And IsNumeric(quantity) Then\n    Session(item) = Session(item) + quantity\n    Response.Write \"Item added to cart\"\n  Else\n    Response.Write \"Invalid input\"\n  End If\nEnd If\n%>\n<html>\n<body>\n<form method=\"post\">\n  Item: <input type=\"text\" name=\"item\"><br>\n  Price: <input type=\"text\" name=\"price\"><br>\n  Quantity: <input type=\"text\" name=\"quantity\"><br>\n  <input type=\"submit\" value=\"Add to Cart\">\n</form>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page to display a countdown timer.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<head>\n<script type=\"text/javascript\">\nvar count = 10;\nfunction countdown() {\n  document.getElementById('timer').innerHTML = count;\n  if (count === 0) {\n    clearInterval(timer);\n    alert('Time's up!');\n  } else {\n    count--;\n  }\n}\nvar timer = setInterval(countdown, 1000);\n</script>\n</head>\n<body>\n<div id=\"timer\"></div>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to display the list of databases on the server.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim adoConn, adoRS, strConnect, strSQL\nSet adoConn = Server.CreateObject(\"ADODB.Connection\")\nstrConnect = \"Provider=SQLOLEDB;Data Source=yourServer;User ID=yourUsername;Password=yourPassword;\"\nadoConn.Open strConnect\nstrSQL = \"SELECT name FROM master..sysdatabases\"\nSet adoRS = adoConn.Execute(strSQL)\nDo Until adoRS.EOF\n  Response.Write adoRS.Fields(\"name\").Value & \"<br>\"\n  adoRS.MoveNext\nLoop\nadoRS.Close\nSet adoRS = Nothing\nadoConn.Close\nSet adoConn = Nothing\n%>\n</body>\n</html>"
        },
        {
          "question": "Create an ASP page to perform CRUD operations on a database table.",
          "solution": "<%@ Language=VBScript %>\n<html>\n<body>\n<%\nDim adoConn, adoRS, strConnect, strSQL\nSet adoConn = Server.CreateObject(\"ADODB.Connection\")\nstrConnect = \"Provider=SQLOLEDB;Data Source=yourServer;User ID=yourUsername;Password=yourPassword;\"\nadoConn.Open strConnect\nstrSQL = \"SELECT * FROM yourTable\"\nSet adoRS = adoConn.Execute(strSQL)\nWhile Not adoRS.EOF\n  Response.Write adoRS.Fields(\"columnName\").Value & \"<br>\"\n  adoRS.MoveNext\nWend\nadoRS.Close\nSet adoRS = Nothing\nadoConn.Close\nSet adoConn = Nothing\n%>\n</body>\n</html>"
        },
        {
          "question": "Write an ASP script to create a simple RSS feed.",
          "solution": "<%@ Language=VBScript %>\n<%\nResponse.ContentType = \"text/xml\"\nResponse.Write \"<?xml version='1.0' encoding='UTF-8'?>\"\nResponse.Write \"<rss version='2.0'>\"\nResponse.Write \"<channel>\"\nResponse.Write \"<title>Your RSS Feed</title>\"\nResponse.Write \"<link>http://www.example.com</link>\"\nResponse.Write \"<description>Your RSS Feed Description</description>\"\nResponse.Write \"<item>\"\nResponse.Write \"<title>Item Title</title>\"\nResponse.Write \"<link>http://www.example.com/item1</link>\"\nResponse.Write \"<description>Item Description</description>\"\nResponse.Write \"</item>\"\nResponse.Write \"</channel>\"\nResponse.Write \"</rss>\"\n%>"
        }
      ]
    },
    {
      "name": "AngularJS",
      "problems": [
        {
          "question": "Create a simple AngularJS app to display 'Hello, World!'",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp'>\n  <h1>{{ message }}</h1>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.message = 'Hello, World!';\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create a program to filter a list of items based on user input using AngularJS.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <input type='text' ng-model='search' placeholder='Search...'>\n  <ul>\n    <li ng-repeat='item in items | filter:search'>{{ item }}</li>\n  </ul>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.items = ['Apple', 'Banana', 'Orange', 'Mango'];\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Write an AngularJS directive to display a custom tooltip when hovering over an element.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n  <style>\n    .tooltip {\n      position: relative;\n      display: inline-block;\n      border-bottom: 1px dotted black;\n    }\n    .tooltip .tooltiptext {\n      visibility: hidden;\n      width: 120px;\n      background-color: black;\n      color: white;\n      text-align: center;\n      padding: 5px 0;\n      border-radius: 6px;\n      position: absolute;\n      z-index: 1;\n    }\n    .tooltip:hover .tooltiptext {\n      visibility: visible;\n    }\n  </style>\n</head>\n<body>\n\n<div ng-app='myApp'>\n  <div class='tooltip'>Hover over me\n    <span class='tooltiptext'>Tooltip text</span>\n  </div>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.directive('tooltip', function() {\n  return {\n    restrict: 'C',\n    link: function(scope, element) {\n      element.on('mouseover', function() {\n        element.children('.tooltiptext').css('visibility', 'visible');\n      });\n      element.on('mouseout', function() {\n        element.children('.tooltiptext').css('visibility', 'hidden');\n      });\n    }\n  };\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS service to fetch data from a JSON API.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <ul>\n    <li ng-repeat='user in users'>{{ user.name }}</li>\n  </ul>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $http) {\n  $http.get('https://jsonplaceholder.typicode.com/users')\n    .then(function(response) {\n      $scope.users = response.data;\n    });\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Write an AngularJS program to perform two-way data binding using ng-model directive.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <input type='text' ng-model='message'>\n  <p>{{ message }}</p>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.message = 'Initial text';\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS program to show/hide content based on user interaction using ng-show and ng-hide directives.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <button ng-click='toggleContent()'>Toggle Content</button>\n  <div ng-show='showContent'>Content to show/hide</div>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.showContent = false;\n  $scope.toggleContent = function() {\n    $scope.showContent = !$scope.showContent;\n  };\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Write an AngularJS program to handle form validation using ng-model and ng-pattern directives.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n  <style>\n    .error {\n      color: red;\n    }\n  </style>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <form name='myForm'>\n    <label>Email:</label>\n    <input type='email' ng-model='email' name='email' ng-pattern='/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/'>\n    <span ng-show='myForm.email.$error.pattern' class='error'>Invalid email address</span>\n  </form>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.email = '';\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS program to sort a table of data using ng-repeat and orderBy filter.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <table>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n    <tr ng-repeat='person in people | orderBy:\"name\"'>\n      <td>{{ person.name }}</td>\n      <td>{{ person.age }}</td>\n    </tr>\n  </table>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.people = [\n    { name: 'John', age: 30 },\n    { name: 'Jane', age: 25 },\n    { name: 'Doe', age: 40 }\n  ];\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS program to implement routing between multiple views.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-route.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp'>\n  <a href='#/home'>Home</a>\n  <a href='#/about'>About</a>\n  <div ng-view></div>\n</div>\n\n<script>\nvar app = angular.module('myApp', ['ngRoute']);\napp.config(function($routeProvider) {\n  $routeProvider\n  .when('/home', {\n    template: '<h1>Home Page</h1>',\n  })\n  .when('/about', {\n    template: '<h1>About Page</h1>',\n  })\n  .otherwise({ redirectTo: '/home' });\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Write an AngularJS program to handle HTTP requests (GET, POST, PUT, DELETE) using $http service.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <ul>\n    <li ng-repeat='post in posts'>{{ post.title }}</li>\n  </ul>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $http) {\n  $http.get('https://jsonplaceholder.typicode.com/posts')\n    .then(function(response) {\n      $scope.posts = response.data;\n    });\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS program to implement form submission and handling using ng-submit directive.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <form ng-submit='submitForm()'>\n    <label>Name:</label>\n    <input type='text' ng-model='name' required>\n    <button type='submit'>Submit</button>\n  </form>\n  <p ng-show='submitted'>Submitted Successfully!</p>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.submitForm = function() {\n    // Handle form submission logic here\n    $scope.submitted = true;\n  };\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Write an AngularJS program to create a custom filter to format data in a desired way.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp' ng-controller='myCtrl'>\n  <ul>\n    <li ng-repeat='item in items | customFilter'>{{ item }}</li>\n  </ul>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  $scope.items = [10, 20, 30, 40, 50];\n});\napp.filter('customFilter', function() {\n  return function(input) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(input[i] * 2);\n    }\n    return output;\n  };\n});\n</script>\n\n</body>\n</html>"
        },
        {
          "question": "Create an AngularJS program to integrate with a third-party library (e.g., jQuery, D3.js) and use it within an AngularJS application.",
          "solution": "<!DOCTYPE html>\n<html>\n<head>\n  <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js'></script>\n  <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>\n  <script src='https://d3js.org/d3.v7.min.js'></script>\n</head>\n<body>\n\n<div ng-app='myApp'>\n  <div id='chart'></div>\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n  // Use jQuery or D3.js here to create charts, manipulate DOM, etc.\n  var data = [10, 20, 30, 40, 50];\n  var svg = d3.select('#chart').append('svg')\n              .attr('width', 400)\n              .attr('height', 200);\n  svg.selectAll('rect')\n     .data(data)\n     .enter()\n     .append('rect')\n     .attr('x', (d, i) => i * 70)\n     .attr('y', (d) => 200 - d * 2)\n     .attr('width', 65)\n     .attr('height', (d) => d * 2)\n     .attr('fill', 'green');\n});\n</script>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "APPML",
      "problems": [
        {
          "question": "Create a basic APPML model with a 'Person' entity having 'name' and 'age' attributes.",
          "solution": "// APPML Model\nentity Person {\n  attribute name: String;\n  attribute age: Integer;\n}"
        },
        {
          "question": "Define a relationship in APPML between 'Person' and 'Address' entities.",
          "solution": "// APPML Model\nentity Person {\n  attribute name: String;\n  attribute age: Integer;\n  relationship address: Address;\n}\n\nentity Address {\n  attribute street: String;\n  attribute city: String;\n  attribute zipCode: String;\n}"
        },
        {
          "question": "Create an enumeration in APPML for 'Gender' with values 'Male', 'Female', and 'Other'.",
          "solution": "// APPML Model\nenumeration Gender {\n  Male,\n  Female,\n  Other\n}"
        },
        {
          "question": "Write an APPML model for a 'Book' entity with 'title', 'author', and 'publishedYear' attributes.",
          "solution": "// APPML Model\nentity Book {\n  attribute title: String;\n  attribute author: String;\n  attribute publishedYear: Integer;\n}"
        },
        {
          "question": "Create an inheritance hierarchy in APPML for 'Shape', 'Circle', and 'Rectangle' entities.",
          "solution": "// APPML Model\nentity Shape {\n  attribute color: String;\n}\n\nentity Circle extends Shape {\n  attribute radius: Double;\n}\n\nentity Rectangle extends Shape {\n  attribute width: Double;\n  attribute height: Double;\n}"
        },
        {
          "question": "Define a many-to-many relationship in APPML between 'Student' and 'Course' entities.",
          "solution": "// APPML Model\nentity Student {\n  attribute name: String;\n  relationship courses: Course[*];\n}\n\nentity Course {\n  attribute name: String;\n  relationship students: Student[*];\n}"
        },
        {
          "question": "Write an APPML model for a 'Product' entity with 'name', 'price', and 'description' attributes.",
          "solution": "// APPML Model\nentity Product {\n  attribute name: String;\n  attribute price: Double;\n  attribute description: String;\n}"
        },
        {
          "question": "Create a model in APPML for a 'Company' entity with 'name', 'location', and 'employees' attributes.",
          "solution": "// APPML Model\nentity Company {\n  attribute name: String;\n  attribute location: String;\n  attribute employees: Integer;\n}"
        },
        {
          "question": "Define an APPML model for 'Order' entity with 'orderId', 'orderDate', and 'totalAmount' attributes.",
          "solution": "// APPML Model\nentity Order {\n  attribute orderId: String;\n  attribute orderDate: Date;\n  attribute totalAmount: Double;\n}"
        },
        {
          "question": "Write an APPML model for 'Student' entity with 'name', 'dateOfBirth', and 'major' attributes.",
          "solution": "// APPML Model\nentity Student {\n  attribute name: String;\n  attribute dateOfBirth: Date;\n  attribute major: String;\n}"
        },
        {
          "question": "Create a model in APPML for 'Employee' entity with 'name', 'position', and 'salary' attributes.",
          "solution": "// APPML Model\nentity Employee {\n  attribute name: String;\n  attribute position: String;\n  attribute salary: Double;\n}"
        },
        {
          "question": "Define an enumeration in APPML for 'Status' with values 'Active', 'Inactive', and 'Pending'.",
          "solution": "// APPML Model\nenumeration Status {\n  Active,\n  Inactive,\n  Pending\n}"
        },
        {
          "question": "Write an APPML model for 'Project' entity with 'name', 'startDate', and 'endDate' attributes.",
          "solution": "// APPML Model\nentity Project {\n  attribute name: String;\n  attribute startDate: Date;\n  attribute endDate: Date;\n}"
        },
        {
          "question": "Create an APPML model for 'Customer' entity with 'name', 'email', and 'phone' attributes.",
          "solution": "// APPML Model\nentity Customer {\n  attribute name: String;\n  attribute email: String;\n  attribute phone: String;\n}"
        },
        {
          "question": "Define a one-to-many relationship in APPML between 'Department' and 'Employee' entities.",
          "solution": "// APPML Model\nentity Department {\n  attribute name: String;\n  relationship employees: Employee[*];\n}\n\nentity Employee {\n  attribute name: String;\n}"
        },
        {
          "question": "Write an APPML model for 'Event' entity with 'eventName', 'date', and 'location' attributes.",
          "solution": "// APPML Model\nentity Event {\n  attribute eventName: String;\n  attribute date: Date;\n  attribute location: String;\n}"
        },
        {
          "question": "Create an inheritance hierarchy in APPML for 'Animal', 'Dog', and 'Cat' entities.",
          "solution": "// APPML Model\nentity Animal {\n  attribute type: String;\n}\n\nentity Dog extends Animal {\n  attribute breed: String;\n}\n\nentity Cat extends Animal {\n  attribute color: String;\n}"
        },
        {
          "question": "Define an enumeration in APPML for 'Role' with values 'Admin', 'User', and 'Guest'.",
          "solution": "// APPML Model\nenumeration Role {\n  Admin,\n  User,\n  Guest\n}"
        },
        {
          "question": "Write an APPML model for 'Message' entity with 'sender', 'receiver', and 'content' attributes.",
          "solution": "// APPML Model\nentity Message {\n  attribute sender: String;\n  attribute receiver: String;\n  attribute content: String;\n}"
        },
        {
          "question": "Create a model in APPML for 'Review' entity with 'productId', 'rating', and 'comment' attributes.",
          "solution": "// APPML Model\nentity Review {\n  attribute productId: String;\n  attribute rating: Integer;\n  attribute comment: String;\n}"
        }
      ]
    },
    {
      "name": "Go",
      "problems": [
        {
          "question": "Write a Go program to print 'Hello, World!'",
          "solution": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}"
        },
        {
          "question": "Create a program to find the sum of two numbers in Go.",
          "solution": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    var num1, num2, sum int\n    fmt.Print(\"Enter two numbers: \")\n    fmt.Scanln(&num1, &num2)\n    sum = num1 + num2\n    fmt.Println(\"Sum:\", sum)\n}"
        },
        {
          "question": "Write a program to check if a number is prime or not in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    limit := int(math.Sqrt(float64(num)))\n    for i := 2; i <= limit; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    var num int\n    fmt.Print(\"Enter a number: \")\n    fmt.Scanln(&num)\n    if isPrime(num) {\n        fmt.Println(num, \"is a prime number\")\n    } else {\n        fmt.Println(num, \"is not a prime number\")\n    }\n}"
        },
        {
          "question": "Create a program to find the factorial of a number in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc factorial(n int) *big.Int {\n    if n < 0 {\n        return big.NewInt(1)\n    }\n    if n == 0 {\n        return big.NewInt(1)\n    }\n    bigN := big.NewInt(int64(n))\n    return bigN.Mul(bigN, factorial(n-1))\n}\n\nfunc main() {\n    var num int\n    fmt.Print(\"Enter a number: \")\n    fmt.Scanln(&num)\n    fmt.Println(\"Factorial:\", factorial(num))\n}"
        },
        {
          "question": "Write a program to find the Fibonacci series up to n terms in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc fibonacci(n int) []*big.Int {\n    fibs := []*big.Int{big.NewInt(0), big.NewInt(1)}\n    for i := 2; i < n; i++ {\n        fib := big.NewInt(0)\n        fib.Add(fibs[i-1], fibs[i-2])\n        fibs = append(fibs, fib)\n    }\n    return fibs\n}\n\nfunc main() {\n    var num int\n    fmt.Print(\"Enter the number of terms: \")\n    fmt.Scanln(&num)\n    fmt.Println(\"Fibonacci Series up to\", num, \"terms:\", fibonacci(num))\n}"
        },
        {
          "question": "Create a program to reverse a string in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc reverseString(str string) string {\n    runes := []rune(str)\n    for i, j := 0, len(runes)-1; i < len(runes)/2; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\nfunc main() {\n    var str string\n    fmt.Print(\"Enter a string: \")\n    fmt.Scanln(&str)\n    fmt.Println(\"Reversed string:\", reverseString(str))\n}"
        },
        {
          "question": "Write a program to find the GCD (Greatest Common Divisor) of two numbers in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc gcd(num1, num2 int64) *big.Int {\n    a := big.NewInt(num1)\n    b := big.NewInt(num2)\n    return a.GCD(nil, nil, b)\n}\n\nfunc main() {\n    var num1, num2 int64\n    fmt.Print(\"Enter two numbers: \")\n    fmt.Scanln(&num1, &num2)\n    fmt.Println(\"GCD:\", gcd(num1, num2))\n}"
        },
        {
          "question": "Create a program to find the sum of elements in an array in Go.",
          "solution": "package main\n\nimport \"fmt\"\n\nfunc sumArray(arr []int) int {\n    sum := 0\n    for _, num := range arr {\n        sum += num\n    }\n    return sum\n}\n\nfunc main() {\n    arr := []int{1, 2, 3, 4, 5}\n    fmt.Println(\"Sum of array elements:\", sumArray(arr))\n}"
        },
        {
          "question": "Write a program to check if a string is a palindrome in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc isPalindrome(str string) bool {\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    var str string\n    fmt.Print(\"Enter a string: \")\n    fmt.Scanln(&str)\n    if isPalindrome(str) {\n        fmt.Println(str, \"is a palindrome\")\n    } else {\n        fmt.Println(str, \"is not a palindrome\")\n    }\n}"
        },
        {
          "question": "Create a program to print all prime numbers between two given numbers in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    limit := int(math.Sqrt(float64(num)))\n    for i := 2; i <= limit; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    var start, end int\n    fmt.Print(\"Enter two numbers (start and end): \")\n    fmt.Scanln(&start, &end)\n    fmt.Println(\"Prime numbers between\", start, \"and\", end, \"are:\")\n    for i := start; i <= end; i++ {\n        if isPrime(i) {\n            fmt.Print(i, \" \")\n        }\n    }\n}"
        },
        {
          "question": "Write a program to find the sum of digits of a number in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc sumOfDigits(num int) int {\n    sum := 0\n    for num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\nfunc main() {\n    var num int\n    fmt.Print(\"Enter a number: \")\n    fmt.Scanln(&num)\n    fmt.Println(\"Sum of digits of\", num, \"is\", sumOfDigits(num))\n}"
        },
        {
          "question": "Create a program to check if a number is Armstrong number or not in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc isArmstrong(num int) bool {\n    var sum, original, remainder int\n    original = num\n    for {\n        remainder = num % 10\n        sum += int(math.Pow(float64(remainder), float64(3)))\n        num /= 10\n        if num == 0 {\n            break\n        }\n    }\n    return sum == original\n}\n\nfunc main() {\n    var num int\n    fmt.Print(\"Enter a number: \")\n    fmt.Scanln(&num)\n    if isArmstrong(num) {\n        fmt.Println(num, \"is an Armstrong number\")\n    } else {\n        fmt.Println(num, \"is not an Armstrong number\")\n    }\n}"
        },
        {
          "question": "Create a program to count the number of vowels and consonants in a string in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc countVowelsConsonants(str string) (int, int) {\n    vowels := \"aeiouAEIOU\"\n    vowelCount, consonantCount := 0, 0\n\n    for _, char := range str {\n        if strings.ContainsRune(vowels, char) {\n            vowelCount++\n        } else if (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n            consonantCount++\n        }\n    }\n    return vowelCount, consonantCount\n}\n\nfunc main() {\n    var str string\n    fmt.Print(\"Enter a string: \")\n    fmt.Scanln(&str)\n    vowels, consonants := countVowelsConsonants(str)\n    fmt.Println(\"Number of vowels:\", vowels)\n    fmt.Println(\"Number of consonants:\", consonants)\n}"
        },
        {
          "question": "Write a program to find the LCM (Least Common Multiple) of two numbers in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc gcd(a, b int64) *big.Int {\n    bigA := big.NewInt(a)\n    bigB := big.NewInt(b)\n    return bigA.GCD(nil, nil, bigB)\n}\n\nfunc lcm(a, b int64) *big.Int {\n    gcd := gcd(a, b)\n    bigA := big.NewInt(a)\n    bigB := big.NewInt(b)\n    return bigA.Mul(bigA.Div(bigA, gcd), bigB)\n}\n\nfunc main() {\n    var num1, num2 int64\n    fmt.Print(\"Enter two numbers: \")\n    fmt.Scanln(&num1, &num2)\n    fmt.Println(\"LCM:\", lcm(num1, num2))\n}"
        },
        {
          "question": "Create a program to print the Pascal's triangle in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc generatePascalsTriangle(numRows int) [][]int {\n    triangle := make([][]int, numRows)\n    for i := range triangle {\n        triangle[i] = make([]int, i+1)\n        triangle[i][0], triangle[i][i] = 1, 1\n        for j := 1; j < i; j++ {\n            triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]\n        }\n    }\n    return triangle\n}\n\nfunc main() {\n    var numRows int\n    fmt.Print(\"Enter the number of rows for Pascal's triangle: \")\n    fmt.Scanln(&numRows)\n    triangle := generatePascalsTriangle(numRows)\n    fmt.Println(\"Pascal's Triangle upto\", numRows, \"rows:\")\n    for _, row := range triangle {\n        fmt.Println(row)\n    }\n}"
        },
        {
          "question": "Write a program to sort elements of an array in ascending order using Bubble Sort in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc bubbleSort(arr []int) {\n    n := len(arr)\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n}\n\nfunc main() {\n    arr := []int{64, 25, 12, 22, 11}\n    fmt.Println(\"Unsorted array:\", arr)\n    bubbleSort(arr)\n    fmt.Println(\"Sorted array:\", arr)\n}"
        },
        {
          "question": "Create a program to check if a string is an anagram of another string in Go.",
          "solution": "package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n    \"strings\"\n)\n\nfunc isAnagram(str1, str2 string) bool {\n    if len(str1) != len(str2) {\n        return false\n    }\n    str1Sorted := sortString(str1)\n    str2Sorted := sortString(str2)\n    return str1Sorted == str2Sorted\n}\n\nfunc sortString(str string) string {\n    chars := strings.Split(str, \"\")\n    sort.Strings(chars)\n    return strings.Join(chars, \"\")\n}\n\nfunc main() {\n    var str1, str2 string\n    fmt.Print(\"Enter first string: \")\n    fmt.Scanln(&str1)\n    fmt.Print(\"Enter second string: \")\n    fmt.Scanln(&str2)\n    if isAnagram(str1, str2) {\n        fmt.Println(\"\", str1, \"and\", str2, \"are anagrams\")\n    } else {\n        fmt.Println(\"\", str1, \"and\", str2, \"are not anagrams\")\n    }\n}"
        }
      ]
    },
    {
      "name": "TypeScript",
      "problems": [
        {
          "question": "Create a TypeScript interface for a 'Car' with properties: make (string), model (string), year (number).",
          "solution": "interface Car {\n    make: string;\n    model: string;\n    year: number;\n}\n\nconst myCar: Car = {\n    make: 'Toyota',\n    model: 'Camry',\n    year: 2020\n};"
        },
        {
          "question": "Write a TypeScript function to calculate the area of a circle given its radius.",
          "solution": "function calculateCircleArea(radius: number): number {\n    return Math.PI * radius * radius;\n}\n\nconst radius = 5;\nconsole.log(`Area of circle with radius ${radius} is: ${calculateCircleArea(radius)}`);"
        },
        {
          "question": "Create a TypeScript class 'Rectangle' with properties length and width, and a method to calculate its area.",
          "solution": "class Rectangle {\n    length: number;\n    width: number;\n\n    constructor(length: number, width: number) {\n        this.length = length;\n        this.width = width;\n    }\n\n    calculateArea(): number {\n        return this.length * this.width;\n    }\n}\n\nconst myRect = new Rectangle(4, 5);\nconsole.log(`Area of rectangle is: ${myRect.calculateArea()}`);"
        },
        {
          "question": "Write a TypeScript function to check if a number is prime.",
          "solution": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}\n\nconst numberToCheck = 17;\nconsole.log(`${numberToCheck} is prime? ${isPrime(numberToCheck)}`);"
        },
        {
          "question": "Create a TypeScript function to merge two arrays of numbers.",
          "solution": "function mergeArrays(arr1: number[], arr2: number[]): number[] {\n    return [...arr1, ...arr2];\n}\n\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconsole.log(`Merged array: ${mergeArrays(array1, array2)}`);"
        },
        {
          "question": "Write a TypeScript function to find the factorial of a number using recursion.",
          "solution": "function factorial(num: number): number {\n    if (num === 0 || num === 1) return 1;\n    return num * factorial(num - 1);\n}\n\nconst num = 5;\nconsole.log(`Factorial of ${num} is: ${factorial(num)}`);"
        },
        {
          "question": "Create a TypeScript function to reverse a string.",
          "solution": "function reverseString(str: string): string {\n    return str.split('').reverse().join('');\n}\n\nconst myString = 'Hello World';\nconsole.log(`Reversed string: ${reverseString(myString)}`);"
        },
        {
          "question": "Write a TypeScript program to sort an array of numbers in ascending order.",
          "solution": "function sortNumbersAscending(arr: number[]): number[] {\n    return arr.sort((a, b) => a - b);\n}\n\nconst unsortedArray = [5, 3, 8, 1, 4];\nconsole.log(`Sorted array: ${sortNumbersAscending(unsortedArray)}`);"
        },
        {
          "question": "Create a TypeScript function to check if a string is a palindrome.",
          "solution": "function isPalindrome(str: string): boolean {\n    const cleanStr = str.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n    const reversedStr = cleanStr.split('').reverse().join('');\n    return cleanStr === reversedStr;\n}\n\nconst testString = 'A man, a plan, a canal, Panama!';\nconsole.log(`${testString} is palindrome? ${isPalindrome(testString)}`);"
        },
        {
          "question": "Write a TypeScript function to find the largest element in an array of numbers.",
          "solution": "function findLargestElement(arr: number[]): number {\n    if (arr.length === 0) throw new Error('Array must not be empty');\n    return Math.max(...arr);\n}\n\nconst numbers = [10, 5, 25, 8, 15];\nconsole.log(`Largest element in array: ${findLargestElement(numbers)}`);"
        },
        {
          "question": "Create a TypeScript program to find the Fibonacci series up to n terms.",
          "solution": "function fibonacciSeries(n: number): number[] {\n    let fibSeries = [0, 1];\n    for (let i = 2; i < n; i++) {\n        fibSeries.push(fibSeries[i - 1] + fibSeries[i - 2]);\n    }\n    return fibSeries;\n}\n\nconst numOfTerms = 8;\nconsole.log(`Fibonacci series up to ${numOfTerms} terms: ${fibonacciSeries(numOfTerms)}`);"
        },
        {
          "question": "Write a TypeScript program to check if a number is Armstrong number or not.",
          "solution": "function isArmstrong(num: number): boolean {\n    const digits = num.toString().length;\n    let sum = 0;\n    let temp = num;\n    while (temp > 0) {\n        const digit = temp % 10;\n        sum += Math.pow(digit, digits);\n        temp = Math.floor(temp / 10);\n    }\n    return sum === num;\n}\n\nconst numberToCheck = 153;\nconsole.log(`${numberToCheck} is Armstrong number? ${isArmstrong(numberToCheck)}`);"
        },
        {
          "question": "Create a TypeScript function to count the number of vowels in a string.",
          "solution": "function countVowels(str: string): number {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    str = str.toLowerCase();\n    for (let char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst testString = 'Hello World';\nconsole.log(`Number of vowels in '${testString}': ${countVowels(testString)}`);"
        },
        {
          "question": "Write a TypeScript function to check if a year is a leap year.",
          "solution": "function isLeapYear(year: number): boolean {\n    if (year % 400 === 0) return true;\n    if (year % 100 === 0) return false;\n    return year % 4 === 0;\n}\n\nconst yearToCheck = 2024;\nconsole.log(`${yearToCheck} is leap year? ${isLeapYear(yearToCheck)}`);"
        },
        {
          "question": "Create a TypeScript function to check if a number is a perfect number.",
          "solution": "function isPerfectNumber(num: number): boolean {\n    let sum = 0;\n    for (let i = 1; i < num; i++) {\n        if (num % i === 0) {\n            sum += i;\n        }\n    }\n    return sum === num;\n}\n\nconst numberToCheck = 28;\nconsole.log(`${numberToCheck} is perfect number? ${isPerfectNumber(numberToCheck)}`);"
        },
        {
          "question": "Write a TypeScript program to find the factorial of a number without using recursion.",
          "solution": "function factorial(num: number): number {\n    let result = 1;\n    for (let i = 2; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nconst num = 5;\nconsole.log(`Factorial of ${num} is: ${factorial(num)}`);"
        },
        {
          "question": "Create a TypeScript function to check if a string contains only digits.",
          "solution": "function containsOnlyDigits(str: string): boolean {\n    return /^d+$/.test(str);\n}\n\nconst testString = '12345';\nconsole.log(`String '${testString}' contains only digits? ${containsOnlyDigits(testString)}`);"
        },
        {
          "question": "Write a TypeScript function to generate a random integer within a specified range [min, max].",
          "solution": "function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst min = 1, max = 100;\nconsole.log(`Random number between ${min} and ${max}: ${getRandomInt(min, max)}`);"
        },
        {
          "question": "Create a TypeScript function to remove all duplicates from an array of numbers.",
          "solution": "function removeDuplicates(arr: number[]): number[] {\n    return arr.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nconst numbers = [1, 2, 2, 3, 4, 4, 5];\nconsole.log(`Array after removing duplicates: ${removeDuplicates(numbers)}`);"
        },
        {
          "question": "Write a TypeScript function to find the sum of all elements in an array.",
          "solution": "function sumArray(arr: number[]): number {\n    return arr.reduce((acc, curr) => acc + curr, 0);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(`Sum of array elements: ${sumArray(numbers)}`);"
        },
        {
          "question": "Create a TypeScript function to find the longest word in a string.",
          "solution": "function findLongestWord(str: string): string {\n    const words = str.split(' ');\n    let longestWord = '';\n    for (let word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}\n\nconst testString = 'The quick brown fox jumped over the lazy dog';\nconsole.log(`Longest word in the string: ${findLongestWord(testString)}`);"
        },
        {
          "question": "Write a TypeScript function to capitalize the first letter of each word in a sentence.",
          "solution": "function capitalizeWords(str: string): string {\n    return str.replace(/\\b\\w/g, (char) => char.toUpperCase());\n}\n\nconst sentence = 'hello world from typescript';\nconsole.log(`Capitalized sentence: ${capitalizeWords(sentence)}`);"
        }
      ]
    },
    {
      "name": "Django",
      "problems": [
        {
          "question": "Create a Django project named 'myproject'.",
          "solution": "django-admin startproject myproject"
        },
        {
          "question": "Create a Django app named 'myapp' inside the project.",
          "solution": "python manage.py startapp myapp"
        },
        {
          "question": "Define a model 'Post' with fields: title (CharField) and content (TextField).",
          "solution": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n\n    def __str__(self):\n        return self.title"
        },
        {
          "question": "Create a Django view to list all 'Post' objects.",
          "solution": "from django.shortcuts import render\nfrom .models import Post\n\ndef post_list(request):\n    posts = Post.objects.all()\n    return render(request, 'post_list.html', {'posts': posts})"
        },
        {
          "question": "Write a Django URL pattern to map '/' to the 'post_list' view.",
          "solution": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.post_list, name='post_list'),\n    # other paths\n]"
        },
        {
          "question": "Create a Django template 'post_list.html' to display all posts.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Posts</h1>\n  <ul>\n    {% for post in posts %}\n      <li>{{ post.title }}</li>\n    {% endfor %}\n  </ul>\n{% endblock %}"
        },
        {
          "question": "Write a Django form 'PostForm' to handle 'Post' model.",
          "solution": "from django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'content']"
        },
        {
          "question": "Create a Django view 'post_create' to handle new post creation using 'PostForm'.",
          "solution": "from django.shortcuts import render, redirect\nfrom .forms import PostForm\n\ndef post_create(request):\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('post_list')\n    else:\n        form = PostForm()\n    return render(request, 'post_form.html', {'form': form})"
        },
        {
          "question": "Write a Django template 'post_form.html' to display and handle 'PostForm'.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>New Post</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"
        },
        {
          "question": "Create a Django view 'post_detail' to display details of a single post.",
          "solution": "from django.shortcuts import render, get_object_or_404\nfrom .models import Post\n\ndef post_detail(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    return render(request, 'post_detail.html', {'post': post})"
        },
        {
          "question": "Write a Django URL pattern to map '/post/<int:pk>/' to 'post_detail' view.",
          "solution": "urlpatterns = [\n    # other patterns\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n]"
        },
        {
          "question": "Create a Django template 'post_detail.html' to display details of a single post.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ post.title }}</h1>\n  <p>{{ post.content }}</p>\n{% endblock %}"
        },
        {
          "question": "Write a Django view 'post_update' to update an existing post using 'PostForm'.",
          "solution": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .forms import PostForm\nfrom .models import Post\n\ndef post_update(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    if request.method == 'POST':\n        form = PostForm(request.POST, instance=post)\n        if form.is_valid():\n            form.save()\n            return redirect('post_detail', pk=pk)\n    else:\n        form = PostForm(instance=post)\n    return render(request, 'post_form.html', {'form': form})"
        },
        {
          "question": "Write a Django URL pattern to map '/post/<int:pk>/update/' to 'post_update' view.",
          "solution": "urlpatterns = [\n    # other patterns\n    path('post/<int:pk>/update/', views.post_update, name='post_update'),\n]"
        },
        {
          "question": "Create a Django view 'post_delete' to delete an existing post.",
          "solution": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Post\n\ndef post_delete(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    if request.method == 'POST':\n        post.delete()\n        return redirect('post_list')\n    return render(request, 'post_confirm_delete.html', {'post': post})"
        },
        {
          "question": "Write a Django URL pattern to map '/post/<int:pk>/delete/' to 'post_delete' view.",
          "solution": "urlpatterns = [\n    # other patterns\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n]"
        },
        {
          "question": "Create a Django template 'post_confirm_delete.html' to confirm post deletion.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Delete Post</h1>\n  <p>Are you sure you want to delete '{{ post.title }}'?</p>\n  <form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Confirm</button>\n    <a href=\"{% url 'post_detail' pk=post.pk %}\">Cancel</a>\n  </form>\n{% endblock %}"
        },
        {
          "question": "Write a Django view 'post_search' to search posts by title.",
          "solution": "from django.shortcuts import render\nfrom .models import Post\n\ndef post_search(request):\n    query = request.GET.get('q')\n    posts = Post.objects.filter(title__icontains=query)\n    return render(request, 'post_search.html', {'posts': posts, 'query': query})"
        },
        {
          "question": "Write a Django URL pattern to map '/search/' to 'post_search' view.",
          "solution": "urlpatterns = [\n    # other patterns\n    path('search/', views.post_search, name='post_search'),\n]"
        },
        {
          "question": "Create a Django template 'post_search.html' to display search results.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Search Results</h1>\n  <p>Showing results for '{{ query }}'</p>\n  <ul>\n    {% for post in posts %}\n      <li>{{ post.title }}</li>\n    {% empty %}\n      <li>No results found.</li>\n    {% endfor %}\n  </ul>\n{% endblock %}"
        },
        {
          "question": "Write a Django view 'post_tag' to filter posts by tags.",
          "solution": "from django.shortcuts import render\nfrom .models import Post\n\ndef post_tag(request, tag):\n    posts = Post.objects.filter(tags__name__in=[tag])\n    return render(request, 'post_tag.html', {'posts': posts, 'tag': tag})"
        },
        {
          "question": "Write a Django URL pattern to map '/tag/<tag>/' to 'post_tag' view.",
          "solution": "urlpatterns = [\n    # other patterns\n    path('tag/<tag>/', views.post_tag, name='post_tag'),\n]"
        },
        {
          "question": "Create a Django template 'post_tag.html' to display posts filtered by a tag.",
          "solution": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Posts tagged with '{{ tag }}'</h1>\n  <ul>\n    {% for post in posts %}\n      <li>{{ post.title }}</li>\n    {% empty %}\n      <li>No posts found for this tag.</li>\n    {% endfor %}\n  </ul>\n{% endblock %}"
        }
      ]
    },
    {
      "name": "MongoDB",
      "problems": [
        {
          "question": "Insert a document into a MongoDB collection named 'books'. Document should contain fields: title, author, and year.",
          "solution": "use bookstore;\ndb.books.insertOne({\n  title: 'Sample Book',\n  author: 'John Doe',\n  year: 2023\n});"
        },
        {
          "question": "Update a document in 'books' collection where title is 'Sample Book'. Set author field to 'Jane Smith'.",
          "solution": "use bookstore;\ndb.books.updateOne(\n  { title: 'Sample Book' },\n  { $set: { author: 'Jane Smith' } }\n);"
        },
        {
          "question": "Find all documents in 'books' collection.",
          "solution": "use bookstore;\ndb.books.find();"
        },
        {
          "question": "Find documents in 'books' collection where year is greater than 2010.",
          "solution": "use bookstore;\ndb.books.find({ year: { $gt: 2010 } });"
        },
        {
          "question": "Delete a document in 'books' collection where title is 'Sample Book'.",
          "solution": "use bookstore;\ndb.books.deleteOne({ title: 'Sample Book' });"
        },
        {
          "question": "Create an index on 'title' field in 'books' collection.",
          "solution": "use bookstore;\ndb.books.createIndex({ title: 1 });"
        },
        {
          "question": "Insert multiple documents into 'books' collection.",
          "solution": "use bookstore;\ndb.books.insertMany([\n  { title: 'Book 1', author: 'Author A', year: 2021 },\n  { title: 'Book 2', author: 'Author B', year: 2022 },\n  { title: 'Book 3', author: 'Author C', year: 2023 }\n]);"
        },
        {
          "question": "Find documents in 'books' collection where author starts with 'J'.",
          "solution": "use bookstore;\ndb.books.find({ author: { $regex: '^J', $options: 'i' } });"
        },
        {
          "question": "Update multiple documents in 'books' collection where year is less than 2010. Set year field to 2010.",
          "solution": "use bookstore;\ndb.books.updateMany(\n  { year: { $lt: 2010 } },\n  { $set: { year: 2010 } }\n);"
        },
        {
          "question": "Find distinct authors in 'books' collection.",
          "solution": "use bookstore;\ndb.books.distinct('author');"
        },
        {
          "question": "Delete all documents in 'books' collection.",
          "solution": "use bookstore;\ndb.books.deleteMany({});"
        },
        {
          "question": "Find documents in 'books' collection where title contains 'MongoDB' keyword.",
          "solution": "use bookstore;\ndb.books.find({ title: { $regex: 'MongoDB', $options: 'i' } });"
        },
        {
          "question": "Sort documents in 'books' collection by year in descending order.",
          "solution": "use bookstore;\ndb.books.find().sort({ year: -1 });"
        },
        {
          "question": "Count documents in 'books' collection.",
          "solution": "use bookstore;\ndb.books.count();"
        },
        {
          "question": "Find documents in 'books' collection where year is between 2010 and 2020.",
          "solution": "use bookstore;\ndb.books.find({ year: { $gte: 2010, $lte: 2020 } });"
        },
        {
          "question": "Find documents in 'books' collection where author is 'John Doe' and year is 2021.",
          "solution": "use bookstore;\ndb.books.find({ author: 'John Doe', year: 2021 });"
        },
        {
          "question": "Update a document in 'books' collection where title is 'Book 1'. Set year field to 2022.",
          "solution": "use bookstore;\ndb.books.updateOne(\n  { title: 'Book 1' },\n  { $set: { year: 2022 } }\n);"
        },
        {
          "question": "Find documents in 'books' collection where title starts with 'B' and year is greater than 2020.",
          "solution": "use bookstore;\ndb.books.find({ title: { $regex: '^B', $options: 'i' }, year: { $gt: 2020 } });"
        },
        {
          "question": "Delete a document in 'books' collection where author is 'Author A'.",
          "solution": "use bookstore;\ndb.books.deleteOne({ author: 'Author A' });"
        },
        {
          "question": "Find documents in 'books' collection where title is 'Book 2' or author is 'Author C'.",
          "solution": "use bookstore;\ndb.books.find({ $or: [{ title: 'Book 2' }, { author: 'Author C' }] });"
        }
      ]
    },
    {
      "name": "Data Science",
      "problems": [
        {
          "question": "Create a Python program to read a CSV file and display its contents.",
          "solution": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\nprint(df)"
        },
        {
          "question": "Write a Python script to calculate the mean, median, and mode of a list of numbers.",
          "solution": "import statistics\n\nnumbers = [1, 2, 3, 4, 5]\nmean = statistics.mean(numbers)\nmedian = statistics.median(numbers)\nmode = statistics.mode(numbers)\nprint('Mean:', mean)\nprint('Median:', median)\nprint('Mode:', mode)"
        },
        {
          "question": "Create a program to perform linear regression on a dataset using Python's scikit-learn library.",
          "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Assuming X and y are loaded from data\nX = np.array([[1], [2], [3], [4]])\ny = np.array([3, 5, 7, 9])\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\nprint('Intercept:', model.intercept_)\nprint('Coefficient:', model.coef_)"
        },
        {
          "question": "Write a Python function to calculate the cosine similarity between two vectors.",
          "solution": "from numpy import dot\nfrom numpy.linalg import norm\n\ndef cosine_similarity(a, b):\n    cos_sim = dot(a, b) / (norm(a) * norm(b))\n    return cos_sim\n\nvector1 = [1, 2, 3]\nvector2 = [4, 5, 6]\nprint('Cosine Similarity:', cosine_similarity(vector1, vector2))"
        },
        {
          "question": "Create a Python script to perform k-means clustering on a dataset using scikit-learn.",
          "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Assuming X is loaded from data\nX = np.array([[1, 2], [1, 4], [1, 0],\n              [4, 2], [4, 4], [4, 0]])\n\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\nprint('Cluster Centers:', kmeans.cluster_centers_)"
        },
        {
          "question": "Write a Python program to perform Principal Component Analysis (PCA) on a dataset.",
          "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\n\n# Assuming X is loaded from data\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\npca = PCA(n_components=2)\nprincipal_components = pca.fit_transform(X)\n\nprint('Principal Components:', principal_components)"
        },
        {
          "question": "Create a Python function to calculate the entropy of a given list of probabilities.",
          "solution": "import math\n\ndef entropy(probabilities):\n    entropy_value = 0\n    for prob in probabilities:\n        entropy_value -= prob * math.log2(prob)\n    return entropy_value\n\nprobabilities = [0.5, 0.3, 0.2]\nprint('Entropy:', entropy(probabilities))"
        },
        {
          "question": "Write a Python script to perform sentiment analysis using NLTK on a text dataset.",
          "solution": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nnltk.download('vader_lexicon')\n\n# Assuming text_data is loaded from data\ntext_data = ['This is a positive review.', 'This is a negative review.']\n\nsid = SentimentIntensityAnalyzer()\nfor text in text_data:\n    print(text)\n    scores = sid.polarity_scores(text)\n    for key in sorted(scores):\n        print('{0}: {1}, '.format(key, scores[key]), end='')\n    print()"
        },
        {
          "question": "Create a Python function to implement the Apriori algorithm for association rule mining.",
          "solution": "from itertools import combinations\n\n# Assuming transactions is loaded from data\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread']]\nmin_support = 2\n\ndef apriori(transactions, min_support):\n    itemsets = []\n    for transaction in transactions:\n        for item in transaction:\n            if not {item} in itemsets:\n                itemsets.append({item})\n    print('Frequent Itemsets:', itemsets)\n\napriori(transactions, min_support)"
        },
        {
          "question": "Write a Python program to train and test a machine learning model using cross-validation.",
          "solution": "from sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\n\n# Assuming X and y are loaded from data\nX, y = load_iris(return_X_y=True)\nmodel = LogisticRegression(max_iter=1000)\nscores = cross_val_score(model, X, y, cv=5)\nprint('Cross-Validation Scores:', scores)"
        },
        {
          "question": "Create a Python script to perform text preprocessing (tokenization, stemming, stop-word removal) using NLTK.",
          "solution": "import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\n\nnltk.download('punkt')\nnltk.download('stopwords')\n\n# Assuming text is loaded from data\ntext = \"This is a sample text for tokenization and stemming.\"\n\ntokens = nltk.word_tokenize(text)\nstop_words = set(stopwords.words('english'))\nfiltered_tokens = [word for word in tokens if word.lower() not in stop_words]\nps = PorterStemmer()\nstemmed_tokens = [ps.stem(word) for word in filtered_tokens]\n\nprint('Filtered Tokens:', filtered_tokens)\nprint('Stemmed Tokens:', stemmed_tokens)"
        },
        {
          "question": "Write a Python program to implement a decision tree classifier using scikit-learn.",
          "solution": "from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Assuming X and y are loaded from data\nX, y = load_iris(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', accuracy)"
        },
        {
          "question": "Create a Python script to perform hierarchical clustering on a dataset using scipy.",
          "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n# Assuming X is loaded from data\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\nlinked = linkage(X, 'single')\nlabelList = range(1, len(X) + 1)\n\nplt.figure(figsize=(10, 7))\ndendrogram(linked,\n            orientation='top',\n            labels=labelList,\n            distance_sort='descending',\n            show_leaf_counts=True)\nplt.show()"
        },
        {
          "question": "Write a Python function to implement the PageRank algorithm for a directed graph.",
          "solution": "import networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\nG.add_edges_from([(1, 2), (1, 3), (2, 1), (3, 2)])\n\n# Calculate PageRank\npagerank = nx.pagerank(G)\n\nprint('PageRank:', pagerank)"
        },
        {
          "question": "Create a Python program to perform text classification using a Naive Bayes classifier.",
          "solution": "from sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\n# Load data\nnewsgroups_train = fetch_20newsgroups(subset='train')\nnewsgroups_test = fetch_20newsgroups(subset='test')\n\n# Vectorize text data\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(newsgroups_train.data)\nX_test = vectorizer.transform(newsgroups_test.data)\n\n# Train Naive Bayes classifier\nmodel = MultinomialNB()\nmodel.fit(X_train, newsgroups_train.target)\n\n# Predict\ny_pred = model.predict(X_test)\n\n# Evaluate\naccuracy = accuracy_score(newsgroups_test.target, y_pred)\nprint('Accuracy:', accuracy)"
        },
        {
          "question": "Create a Python script to perform sentiment analysis using a pre-trained BERT model.",
          "solution": "from transformers import pipeline\n\n# Load sentiment analysis pipeline\nclassifier = pipeline('sentiment-analysis')\n\ntext = 'I love using this product!'\nresult = classifier(text)\n\nprint('Sentiment Analysis Result:', result)"
        },
        {
          "question": "Write a Python program to perform text summarization using the Gensim library.",
          "solution": "from gensim.summarization import summarize\n\n# Assuming text is loaded from data\ntext = \"Text to summarize...\"\n\nsummary = summarize(text)\n\nprint('Summary:', summary)"
        },
        {
          "question": "Create a Python function to implement the expectation-maximization (EM) algorithm for Gaussian Mixture Models (GMM).",
          "solution": "from sklearn.mixture import GaussianMixture\n\n# Assuming X is loaded from data\nX = [[0.5], [1.0], [-1.0], [2.0]]\n\n# Initialize GMM model\ngmm = GaussianMixture(n_components=2)\ngmm.fit(X)\n\nprint('Means:', gmm.means_)\nprint('Covariances:', gmm.covariances_)"
        },
        {
          "question": "Write a Python script to perform feature selection using Recursive Feature Elimination (RFE) with a support vector machine (SVM) classifier.",
          "solution": "from sklearn.datasets import make_friedman1\nfrom sklearn.feature_selection import RFE\nfrom sklearn.svm import SVR\n\n# Generate synthetic dataset\nX, y = make_friedman1(n_samples=50, n_features=10, random_state=0)\n\n# Initialize RFE with SVM\nestimator = SVR(kernel='linear')\nselector = RFE(estimator, n_features_to_select=5, step=1)\nselector = selector.fit(X, y)\n\nprint('Selected Features:', selector.support_)"
        },
        {
          "question": "Create a Python program to implement the AdaBoost algorithm for classification using decision trees.",
          "solution": "from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Generate synthetic dataset\nX, y = make_classification(n_samples=100, n_features=20, random_state=0)\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Initialize AdaBoost classifier\nmodel = AdaBoostClassifier(n_estimators=50, random_state=0)\nmodel.fit(X_train, y_train)\n\n# Predict\ny_pred = model.predict(X_test)\n\n# Evaluate\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', accuracy)"
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "problems": [
        {
          "question": "Create a table named 'employees' with columns id (integer), name (text), and salary (numeric).",
          "solution": "CREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    salary NUMERIC\n);"
        },
        {
          "question": "Insert a new employee into the 'employees' table with id=1, name='John Doe', and salary=50000.",
          "solution": "INSERT INTO employees (id, name, salary) VALUES (1, 'John Doe', 50000);"
        },
        {
          "question": "Write a query to select all employees from the 'employees' table.",
          "solution": "SELECT * FROM employees;"
        },
        {
          "question": "Update the salary of employee with id=1 to 60000.",
          "solution": "UPDATE employees SET salary = 60000 WHERE id = 1;"
        },
        {
          "question": "Delete the employee with id=1 from the 'employees' table.",
          "solution": "DELETE FROM employees WHERE id = 1;"
        },
        {
          "question": "Create a table named 'departments' with columns id (integer) and name (text).",
          "solution": "CREATE TABLE departments (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n);"
        },
        {
          "question": "Insert a new department into the 'departments' table with id=1 and name='IT'.",
          "solution": "INSERT INTO departments (id, name) VALUES (1, 'IT');"
        },
        {
          "question": "Write a query to find employees whose salary is greater than 60000.",
          "solution": "SELECT * FROM employees WHERE salary > 60000;"
        },
        {
          "question": "Update the department name from 'IT' to 'HR' in the 'departments' table.",
          "solution": "UPDATE departments SET name = 'HR' WHERE name = 'IT';"
        },
        {
          "question": "Delete the department with id=1 from the 'departments' table.",
          "solution": "DELETE FROM departments WHERE id = 1;"
        },
        {
          "question": "Create a table named 'projects' with columns id (integer), name (text), and start_date (date).",
          "solution": "CREATE TABLE projects (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    start_date DATE\n);"
        },
        {
          "question": "Insert a new project into the 'projects' table with id=1, name='Database Migration', and start_date='2024-01-01'.",
          "solution": "INSERT INTO projects (id, name, start_date) VALUES (1, 'Database Migration', '2024-01-01');"
        },
        {
          "question": "Write a query to find projects started after '2023-06-01'.",
          "solution": "SELECT * FROM projects WHERE start_date > '2023-06-01';"
        },
        {
          "question": "Update the start_date of project with id=1 to '2025-01-01'.",
          "solution": "UPDATE projects SET start_date = '2025-01-01' WHERE id = 1;"
        },
        {
          "question": "Delete the project with id=1 from the 'projects' table.",
          "solution": "DELETE FROM projects WHERE id = 1;"
        },
        {
          "question": "Create a table named 'orders' with columns id (integer), product_name (text), and quantity (integer).",
          "solution": "CREATE TABLE orders (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT,\n    quantity INTEGER\n);"
        },
        {
          "question": "Insert a new order into the 'orders' table with id=1, product_name='Laptop', and quantity=10.",
          "solution": "INSERT INTO orders (id, product_name, quantity) VALUES (1, 'Laptop', 10);"
        },
        {
          "question": "Write a query to find orders where quantity is less than 5.",
          "solution": "SELECT * FROM orders WHERE quantity < 5;"
        },
        {
          "question": "Update the product_name of order with id=1 to 'Desktop'.",
          "solution": "UPDATE orders SET product_name = 'Desktop' WHERE id = 1;"
        },
        {
          "question": "Delete the order with id=1 from the 'orders' table.",
          "solution": "DELETE FROM orders WHERE id = 1;"
        },
        {
          "question": "Create a table named 'customers' with columns id (integer), name (text), and email (text).",
          "solution": "CREATE TABLE customers (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    email TEXT\n);"
        }
      ]
    }
  ]
}
